<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="File Drop"
                author_email="na.li@epfl.ch, maria.rodrigueztriana@epfl.ch"
                author="Na Li, María Jesús Rodríguez-Triana"
                description="This widget allows users to drag and drop files into a space. It also displays a list of existing resources in the space. It currently only works in Graasp.eu.">
    <Locale messages="./file_drop_languages/ALL_ALL.xml"/>
    <Locale lang="es" messages="./file_drop_languages/es_ALL.xml"/>
    <Locale lang="de" messages="./file_drop_languages/de_ALL.xml"/>
    <Locale lang="fr" messages="./file_drop_languages/fr_ALL.xml"/>
    <Require feature="osapi" />
    <Require feature="dynamic-height" />
  </ModulePrefs>
  <Content type="html" view="default,canvas,home,profile"><![CDATA[
<link rel="stylesheet" href="http://shindig2.epfl.ch/gadget/libs/dropzone/css/dropzone.css" type="text/css">
<link rel="stylesheet" href="http://shindig2.epfl.ch/gadget/libs/bootstrap/css/bootstrap.min.css" type="text/css">

<!-- Style  configuration -->
<style type="text/css">
  body{background-color:transparent;font-family: "Helvetica Neue", arial, sans-serif;font-size: 13px;}
  .gadgets-gadget{width: 100%;}
  .content {
    margin-top: 5px;
    font-size: 12px;
    text-indent:10px;
  }
  #container {
    background-color:white;
    border-radius:5px;
    padding:5px;
  }
  .doc_list {
    margin-left: 5px;
  }
  .list_title {
    font-size: 16px;
    text-indent: 10px;
    padding-top: 5px;
    padding-bottom: 5px;
    position: relative;
    font-weight: bold;
  }
  .msg {
    margin-left: 10px;
    font-size: 14px;
    margin-bottom: 5px;
  }
  a {
    color: #000000;
  }
  a:visited {
    color: #000000;
  }
</style>

<div id="container">
  <form method="post" action="/" class="dropzone" id="file-dropzone" enctype = "multipart/form-data">
    <input id="request" type="hidden" name="request"></input>
  </form>
  <div class="list_title">__MSG_resources_in_the_space__</div>
  <table class="table table-hover doc_list"><tbody id="list"></tbody></table>
  <div id = "msg" class="msg"><div>
</div>
<script type="text/javascript" src="http://shindig2.epfl.ch/gadget/libs/underscore-min.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js"></script>
<script type="text/javascript" src="http://open-app.googlecode.com/files/openapp.js"></script>
<script type="text/javascript" src="http://shindig2.epfl.ch/gadget/libs/dropzone/dropzone.min.js"></script>
<script type="text/javascript" src="http://shindig2.epfl.ch/ils/main/ils_graaspeu.js"></script>

<script type="text/javascript">
var app = {};
var nameList = [];
var context = {};
var userResources = [];


// gets the data and calls build for container
var initialize = function() {
  app.list = $("#list");
  getContext();
  dropListener();
  adjustHeight();
};

function getContext(){
  ils.getAppContextParameters(function(contextParameters){
    context = contextParameters;
    if(context.provider.id != "undefined" && context.storageId != "undefined"){//The provider is an ILS with VAULT
      ils.getVaultByIlsId(context.provider.id, function(vault) {
          context.storageVisibility = vault.visibilityLevel;
          getResourceList();
      });
    } else { // The resources will be retrieved from/stored in the current space
      osapi.context.get().execute(function(space){
        context.storageId = space.contextId;
        context.storageType = space.contextType;
        if(space.visibilityLevel){
          context.storageVisibility = space.visibilityLevel;
        }else{
          context.storageVisibility = "public";
        }
        getResourceList();
      });
    }
  });
}

function getResourceList(){
  ils.listFilesBySpaceId(context.storageId, function(resourceList) {
    build(resourceList);
  });
}

// Bind listener to dropzone, and upload the dropped file
function dropListener(){
  Dropzone.options.fileDropzone = {
    init: function() {
      this.on("addedfile", function(file) {
        var filename = file.name;
          getResourceList();
          if (nameList.indexOf(filename)==-1) {
            var file_type = file.type;
            this.options.url  = "/rpc?method=documents.create&id=documents.create" + "&st=" + getQueryVariable("st");
            var metadata = context;
            metadata.target = {
               "objectType": "file",
               "id": "",
               "displayName": filename
            }
            var request={"method":"documents.create",
              "params": {
                "document": {
                  "parentSpaceId": context.storageId,
                  "mimeType": file_type,
                  "fileName": filename,
                  "metadata": metadata
                }
              },
              "id":"documents.create"
            }

          // add request payload to the form
          $('#request').val(JSON.stringify(request));
        } else {
          alert("__MSG_file_name_warning__");
          this.removeFile(file);
        }
      });

      this.on("success", function(file, response) {
        if (response.hasOwnProperty("result")) {
          $('#msg').text("");
          buildItem(response.result);
          userResources.push(response.result.id);
          adjustHeight();
        }
      });

    }
  };
}

function getQueryVariable(variable) {
  var query = window.location.search.substring(1);
  var vars = query.split('&');
  for (var i = 0; i < vars.length; i++) {
      var pair = vars[i].split('=');
      if (decodeURIComponent(pair[0]) == variable) {
          return decodeURIComponent(pair[1]);
      }
  }
  console.log('Query variable %s not found', variable);
}

function verifyFilename(filename, cb) {
  ils.listFilesBySpaceId(context.storageId, function(resourceList) {
    build(resourceList);
    if (nameList.indexOf(filename)==-1) {
      return cb(true);
    }else{
      return cb(false);
    }
  });
}

var adjustHeight = function() {
  gadgets.window.adjustHeight();
}

// build the container with gadgets
var build = function(documents) {
  nameList = [];
  $("#list").empty();
  if (documents.error || documents.length ==0) {
    $('#msg').text("__MSG_no_resource_found__");
  } else {
    if(context.storageVisibility != "public" && userResources.length ==0){
      $('#msg').text("__MSG_no_resource_found__");
    }
    $.each(documents, function(key,value) {
      nameList.push(value.displayName);
      if(value.visibilityLevel == "public" || userResources.indexOf(value.id)>-1){
        buildItem(value);
      }
    });

  }

  // resize the gadget
  gadgets.window.adjustHeight();

  // 2 seconds
  setTimeout(adjustHeight,2000);
  // 5 seconds
  setTimeout(adjustHeight,5000);
};


buildItem = function (doc) {
  var doc_id = 'document_'+doc.id;
  var doc_el = $("<tr id='"+doc_id+"'></tr>");

  var doc_name = $('<td id="doc_name"></td>');
  if(context.storageVisibility == "public"){
    var download_link = $("<a target='_blank'></a>");
    download_link.attr("href",doc.originUrl);
    download_link.text(doc.displayName);
    doc_name.append(download_link);
  } else {
    doc_name.text(doc.displayName);
  }
  doc_el.append(doc_name);

  var update_time = $('<td id = "update_time"></td>');
  update_time.text(doc.updated.replace("T"," ").replace(/.....$/,""));
  doc_el.append(update_time);

  app.list.prepend(doc_el);
}


</script>

<script type="text/javascript">
gadgets.util.registerOnLoadHandler(initialize);
</script>


  ]]></Content>
</Module>
