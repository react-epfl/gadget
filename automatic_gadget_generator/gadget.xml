<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Automatic UI Generator" author_email="hagop.jamkojian@epfl.ch" author="Hagop Jamkojian" height="600" width="800">
<Require feature="opensocial-0.9"/>
<Require feature="osapi"/>
<Require feature="dynamic-height"/>
</ModulePrefs>
<Content type="html">
<![CDATA[
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Automatic Gadget Generator</title>
    <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"/>  
    <script type="text/javascript" src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
    <script type="text/javascript" src="http://shindig2.epfl.ch/ils/main/ils_graaspeu.js"></script>
    <script type="text/javascript" src="http://rawgit.com/eligrey/FileSaver.js/master/FileSaver.js"></script>
    <style>
        body {
            background-color: #5050d2;
        }
        #mainDiv {
            margin-top: 40px;
            font-size: 16px;
            line-height: 1.42857143;
            color: #ffffff;
            background-color: #5050d2;
            font-family:arial,sans-serif;
            margin-bottom:20px;
            padding-left: 70px;
            padding-right: 50px;
            color: white;
            overflow: hidden;
        }
        #errorDiv {
            margin-top: 10px;
        }
        #appLinkDiv {
            margin-top: 15px;
            word-wrap: break-word;
        }
        .btn {
            background-color: white;
            color: black;
            margin: 15px 10px 0 0;
        }
        input {
            color: black;
        }
        #screenshotDiv {
            font-size: 18px;
            display: none;
            margin-top: 7px;
            border: 3px black solid;
            padding-left: 12px;
            padding-bottom: 10px;
            padding-top: 10px;
        }
        #experimentsDiv, #changeVisibility {
            display: none;
        }
        #instructionsDiv {
            margin-top: 10px;
            display: none;
        }
        #instructionsButton.active {
            background-color: #6262FF;
            color: white;
        }
    </style>
</head>
<body>
    <div id="mainDiv">
        <p>IP Address: &nbsp; <input type="text" maxlength="15" size="15" id="ipAddress"/></p>
        <p>Port Number: &nbsp; <input type="text" maxlength="5" size="5" id="port"/></p>
        <p><button class="btn" background-color="white" id="configurator">Get Configurations</button></p>
        <div id="experimentsDiv"></div>
        <button class="btn" background-color="white" id="generator">Download Gadget</button>
        <button class="btn" background-color="white" id="graaspGenerator">Add Gadget to Graasp</button>
        <script>
            $('#generator, #graaspGenerator').hide();
        </script>
        <div id="errorDiv"></div>
        <div id="appLinkDiv"></div>
        <div id="instructionsDiv"><button id="instructionsButton" class="btn">Show Instructions</button><br>
            <div id="screenshotDiv">
                <div id="stepOne">
                    <b>Step 1: </b><span>Copy the above link<br></span>
                    <img src="http://shindig2.epfl.ch/gadget/automatic_gadget_generator/screenshots/screenshot1.png"/><br>
                </div>
                <img id="changeVisibility" src ="http://shindig2.epfl.ch/gadget/automatic_gadget_generator/screenshots/screenshot5.png"/><br><p><p>
                <b>Step 2: </b>Go to the space where you want to add the app and click on the plus icon<br>
                <img src="http://shindig2.epfl.ch/gadget/automatic_gadget_generator/screenshots/screenshot2.png"/><br><p></p>
                <b>Step 3: </b>Click on "Add App"<br>
                <img src="http://shindig2.epfl.ch/gadget/automatic_gadget_generator/screenshots/screenshot3.png"/><br><p></p>
                <b>Step 4: </b>Paste the copied link and add the app<br>
                <img src="http://shindig2.epfl.ch/gadget/automatic_gadget_generator/screenshots/screenshot4.png"/><br>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            var ip;
            var port;
            var ws;
            var body = '<body>\n';
            var actuators = '';
            var onOpen = 'ws.onopen = function() { \n connected = 1; \n';
            var booleanArray = 'var booleanArray = [ ';
            var scriptHeader = '';
            var oneOptionOnlyFlag = 1;
            var allSensorsActuators = [];
            var experiments = [];
            var checkboxes = [];
            var configurationArray = 'var configurationArray = [];\nvar dataValues = [];\ndataValues["time"] = 0;\n';
            var actuatorsArray = '';
            var sensorsArray = 'var sensorsArray = [];\n';
            var videoCode = 'FF=(navigator.userAgent.search("Firefox") >= 0);\n';
            var initialOption;
            var graasp = 1;
            var oneOptionAvailable = 0;
            var metadata;
            var saveToGraasp = 0;
            var isPrivate = 0;
            
            ils.getAppContextParameters(function(data) {
                metadata = data;
                metadata.storageId = metadata.provider.inquiryPhaseId;
                if (metadata.provider.inquiryVisibility == "private") {
                    $('#stepOne span').empty();
                    $('#stepOne span').html('<b>Copy the above link and make this space public</b><br>');
                    $('#changeVisibility').show();
                    isPrivate = 1;
                }
            });

            $('#configurator').click(function() {
                ip = $('#ipAddress').val();
                port = $('#port').val();
                if (!ip || !port)
                    return alert("Please enter an IP address and a port number.");
                $('#generator, #graaspGenerator, #instructionsDiv').hide();
                $('#experimentsDiv').show();
                $("#appLinkDiv, #errorDiv").empty();
                ws = new WebSocket('ws://' + ip + ':' + port);
                experiments = [];
                checkboxes = [];
                var node = document.getElementById("experimentsDiv");
                while (node.hasChildNodes()) {
                    node.removeChild(node.lastChild);
                }
                $('#experimentsDiv').append("<hr>");

                ws.onerror = function() {
                    alert('Unable to connect. Please make sure you input the correct IP address and port number.');
                }

                ws.onopen = function() {
                    ws.send(JSON.stringify({ method: 'getExperiments'}));
                };

                ws.onmessage = function(event) {
                    var data = event.data;
                    var msg;
                    try {
                        msg = JSON.parse(data);
                        if (msg.method == "getSensorMetadata") {
                            $.each(msg.sensors, function(index,sensor){
                                if (allSensorsActuators.indexOf(sensor.sensorId)>(-1)){
                                    body += '<div id="'+sensor.sensorId+'Div">\n';
                                    if (sensor.webSocketType == 'binary' && sensor.singleWebSocketRecommended == true) {
                                        body += '<br><canvas id="' + sensor.sensorId + '" width="100" height="100" style="border: 2px solid #c3c3c3"></canvas><br>\n';
                                        videoCode += sensor.sensorId + 'ws = new WebSocket ("ws://' + ip + ':' + port + '/' + 'WS_Video' + '");\n'+
                                            'var myImage' + sensor.sensorId + ' = new Image();\n'+
                                            sensor.sensorId + 'ws.onopen = function(event) {\n'+
                                            'var sensorRequest = {\n'+
                                            'method: "getSensorData",\n'+
                                            'sensorId: "' + sensor.sensorId + '",\n'+
                                            'accessRole: "controller"\n'+
                                            '}\n'+
                                            'var jsonRequest = JSON.stringify(sensorRequest);\n'+
                                            sensor.sensorId + 'ws.send(jsonRequest);\n'+
                                            '}\n'+
                                            sensor.sensorId + 'ws.onmessage = function(event) {\n'+
                                            'if (event.data instanceof Blob) {\n'+
                                            'var destinationCanvas = document.getElementById("' + sensor.sensorId + '");\n'+
                                            'destinationCanvas.height="240";\n'+
                                            'destinationCanvas.width="320";\n'+
                                            'var destinationContext = destinationCanvas.getContext("2d");\n'+
                                            'var URL = window.URL || window.webkitURL;\n'+
                                            'if (FF) {\n'+
                                            'myImage' + sensor.sensorId + '.src = URL.createObjectURL(event.data);\n'+
                                            'destinationContext.drawImage(myImage' + sensor.sensorId + ', 0, 0);\n'+
                                            '}\n'+
                                            'else { \n'+
                                            'destinationContext.drawImage(myImage' + sensor.sensorId + ', 0, 0);\n'+
                                            'myImage' + sensor.sensorId + '.src = URL.createObjectURL(event.data);\n'+
                                            '}\n'+
                                            '}\n'+
                                            '}\n'+
                                            sensor.sensorId + 'ws.onclose = function(event) { };\n';
                                    } else {
                                        sensorsArray += 'sensorsArray["'+sensor.sensorId+'"]= [];\n';
                                        $.each(sensor.values, function(valueIndex, value) {
                                            if (value.type) {
                                                sensorsArray += 'sensorsArray["'+sensor.sensorId+'"]['+valueIndex+'] = "'+value.name+'";\n'+
                                                    'dataSet.dataSourceColumns.push({unit:""})\n'+
                                                    'dataSet.dataTable.cols.push({id:"'+value.name+'",label:"'+value.name+'",pattern:"", type:"number"})\n';
                                            }
                                            if(value.type == 'boolean') {
                                                booleanArray+= '"'+ value.name +'",';
                                                body+= '<span id="span' + value.name + '"><p></p>' + value.name+ '<br></span>\n<div id="'+ value.name +'" class="led-green-off"></div>\n';
                                                sensorsArray+= 'dataValues["'+value.name+'"] = 0;\n';
                                            } else 
                                                if (value.type == 'string') {
                                                    body+= '<span id="span'+value.name+'"><p></p>'+value.name+ ': </span><span id="'+ value.name +'">0</span>'+ value.unit +'\n';
                                                    sensorsArray+= 'dataValues["'+value.name+'"] = 0;\n';
                                                }
                                        });
                                        onOpen+= 'sensorRequest = {\n'+
                                            'method: "getSensorData",\n'+
                                            'sensorId: "'+ sensor.sensorId +'",\n'+
                                            'accessRole: "controller"\n'+
                                            '}\n'+
                                            'jsonRequest = JSON.stringify(sensorRequest);\n'+
                                            'ws.send(jsonRequest);\n';
                                    }
                                    body += '</div>\n';
                                }
                            });
                            body+= '<p></p>\n';
                            onOpen+= '};\n';
                            booleanArray = booleanArray.substring(0, booleanArray.length - 1);
                            booleanArray+= '];\n';
                            createGadget();
                        } else {
                            if (msg.method == "getActuatorMetadata") {
                                $.each(msg.actuators, function(index, actuator){
                                    if (allSensorsActuators.indexOf(actuator.actuatorId)>(-1)) {
                                        body += '<div id="'+actuator.actuatorId+'Div">\n';
                                        actuatorsArray += 'var '+actuator.actuatorId + 'Arr = []\n';
                                        actuators += 'var '+actuator.actuatorId+'SendData = function () {\n'+
                                            'var actuatorRequest = {\n'+
                                            'authToken: "skfjs343kjKJ",\n'+
                                            'method: "sendActuatorData",\n'+
                                            'accessRole: "controller",\n'+
                                            'actuatorId: "' + actuator.actuatorId + '",\n'+
                                            'valueNames: "",\n'+
                                            'data: '+ actuator.actuatorId + 'Arr\n'+
                                            '};\n'+
                                            'var jsonRequest = JSON.stringify(actuatorRequest);\n'+
                                            'if(connected)\n'+
                                            'ws.send(jsonRequest);\n'+
                                            '};\n';
                                        $.each(actuator.values, function(valueIndex, value){
                                            if (value.type) {
                                                actuatorsArray += actuator.actuatorId + 'Arr[' + valueIndex + '] = 0; \n';
                                                actuators += 'dataSet.dataSourceColumns.push({unit:""})\n'+
                                                    'dataSet.dataTable.cols.push({id:"'+value.name+'",label:"'+value.name+'",pattern:"", type:"number"})\n';
                                            }
                                            if (value.type=="boolean"){    
                                                body+= '<span id="span'+ value.name + '"><p></p>' + value.name + ': &nbsp;</span><button class="btn" background-color="white" id="' + value.name + '">Turn On</button>\n';
                                                actuators+= '$("#' + value.name + '").click(function() {\n'+
                                                    'var logObject = {\n'+
                                                    '"objectType": "boolean",\n'+
                                                    '"displayName":"'+ value.name +'",\n'+
                                                    '}\n'+
                                                    'if(!$(this).hasClass("button-on")){\n'+
                                                    actuator.actuatorId + 'Arr [' + valueIndex + '] = 1;\n'+
                                                    '$(this).html("Turn off");\n'+
                                                    '$(this).addClass("button-on");\n'+
                                                    'dataValues["'+value.name+'"] = 1;\n'+
                                                    (graasp?'if (actionLoggerReady) actionLogger.logStart(logObject);\n':'')+
                                                    '} else {\n'+
                                                    actuator.actuatorId + 'Arr [' + valueIndex + '] = 0;\n'+
                                                    '$(this).html("Turn on");\n'+
                                                    '$(this).removeClass("button-on");\n'+
                                                    'dataValues["'+value.name+'"] = 0;\n'+
                                                    (graasp?'if (actionLoggerReady) actionLogger.logCancel(logObject);\n':'')+
                                                    '}\n'+
                                                    actuator.actuatorId + 'SendData();\n'+
                                                    '});\n'+
                                                    'dataValues["'+value.name+'"] = 0;\n';
                                            } else 
                                                if (value.type=="float") {
                                                    body+= '<p></p>'+value.name + ': &nbsp;&nbsp;<input id="' + value.name + '" type="text" data-slider-min="' + value.rangeMinimum + '" data-slider-max="' + value.rangeMaximum + '" data-slider-step="0.1" data-slider-value="0"/>\n';
                                                    actuators+= '$("#'+ value.name +'").slider({formatter: function(currentVal){  return currentVal + "'+ value.unit +'" }});\n'+
                                                        '$("#'+ value.name +'").on("change", function(slideEvt) {\n'+
                                                        'var logObject = {\n'+
                                                        '"objectType": "slider",\n'+
                                                        '"displayName":"'+ value.name+'",\n'+
                                                        '"content": slideEvt.value.newValue\n'+
                                                        '}\n'+
                                                        'dataValues["'+value.name+'"] = slideEvt.value.newValue;\n'+
                                                        (graasp?'if(actionLoggerReady) actionLogger.logChange(logObject);\n':'')+
                                                        actuator.actuatorId + 'Arr [' + valueIndex + '] = slideEvt.value.newValue;\n'+
                                                        actuator.actuatorId + 'SendData();\n'+
                                                        '});\n'+
                                                        'dataValues["'+value.name+'"] = 0;\n';
                                                }
                                        });
                                        body += '</div>\n';
                                    }
                                });
                                body+= '<p></p><br>\n';
                                ws.send(JSON.stringify({ method: 'getSensorMetadata'}));
                            } else {
                                if (msg.method == "getExperiments" && msg.experiments.length>0) {
                                    if (msg.experiments.length == 1) {
                                        oneOptionAvailable = 1;
                                        var experiment = msg.experiments[0];
                                        experiments[0] = experiment;
                                        $("#experimentsDiv").append("There is only one available configuration for this remote lab: <br>");
                                        $("#experimentsDiv").append(experiment.fullName + " : " + experiment.description);
                                    } else {
                                        $("#experimentsDiv").append("Choose at least one configuration: <br>");
                                        experiments = msg.experiments;
                                        $.each(msg.experiments, function(index,experiment) {
                                            var checkbox = document.createElement('input');
                                            checkbox.type = "checkbox";
                                            checkbox.id = experiment.experimentId;
                                            checkbox.value = experiment.experimentId;
                                            checkboxes.push(checkbox);
                                            $("#experimentsDiv").append("<label>");
                                            $("#experimentsDiv").append(checkbox);
                                            $("#experimentsDiv").append("  " + experiment.fullName + " : " + experiment.description);
                                            $("#experimentsDiv").append("</label><br>");
                                        });
                                    }
                            
                                    $("#experimentsDiv").append("<p></p><br>");
                                    $("#experimentsDiv").append("Choose your educational platform: <br>");

                                    var graaspRadio = document.createElement('input');
                                    graaspRadio.type = "radio";
                                    graaspRadio.name = "optradio";
                                    graaspRadio.id = "graasp";
                                    graaspRadio.value = "graasp";
                                    graaspRadio.checked = true;
                                    $("#experimentsDiv").append("<label>");
                                    $("#experimentsDiv").append(graaspRadio);
                                    $("#experimentsDiv").append("  Graasp");
                                    $("#experimentsDiv").append("</label>&emsp;");

                                    var ltiRadio = document.createElement('input');
                                    ltiRadio.type = "radio";
                                    ltiRadio.name = "optradio";
                                    ltiRadio.id = "lti";
                                    ltiRadio.value = "lti";
                                    $("#experimentsDiv").append("<label>");
                                    $("#experimentsDiv").append(ltiRadio);
                                    $("#experimentsDiv").append("  LTI Consumer");
                                    $("#experimentsDiv").append("</label><br>");
                                    $('#generator, #graaspGenerator').show();
                                }
                            }
                        }
                    } catch(e) {
                        console.log(e);
                    }
                };
            });

            $('#generator, #graaspGenerator').click(function(){
                $("#errorDiv").empty();
                if ($('input[name=optradio]:checked').val() == "graasp") {
                    graasp = 1;
                } else {
                    graasp = 0;
                }

                if ($(this).attr("id") == "graaspGenerator"){
                    saveToGraasp = 1;
                    $("#appLinkDiv").empty();
                } else
                    saveToGraasp = 0;

                var numOptions = 0;
                $.each(checkboxes, function(index,checkbox){
                    if (checkbox.checked)
                        numOptions++;
                });

                if (oneOptionAvailable)
                    numOptions = 1;

                if (numOptions > 1) {
                    oneOptionOnlyFlag = 0;
                }

                if (numOptions == 0 && !oneOptionAvailable){
                    $("#errorDiv").append("Please select at least one option")
                } else {
                    var firstOne = 1;
                    $.each(experiments, function (index, experiment){
                        var experimentSelected = 0;
                        $.each(checkboxes, function (index2, checkbox){
                            if (checkbox.value == experiment.experimentId)
                                if (checkbox.checked)
                                    experimentSelected = 1;
                        });
                        if (experimentSelected || oneOptionAvailable) {
                            if (!oneOptionOnlyFlag) {
                                body += '<label class="radio-inline"><input type="radio" name="optradio" value="'+experiment.experimentId+ (firstOne?'" checked="true"':'"') + ' id="' + experiment.experimentId + '"><h4>'+experiment.fullName+'</h4></label>\n';
                            }
                            if (firstOne) {
                                initialOption = 'var initialOption = "' + experiment.experimentId + '";\nshowHideElements(initialOption);\n';
                                firstOne = 0;
                            }
                            configurationArray += 'configurationArray["'+experiment.experimentId+'"] = [ ';
                            $.each (experiment.actuators, function (actuatorIndex, actuator){
                                configurationArray += '"'+ actuator.actuatorId + '",';
                                if (!(allSensorsActuators.indexOf(actuator.actuatorId) > -1))
                                    allSensorsActuators.push(actuator.actuatorId);
                            });
                            $.each (experiment.sensors, function (sensorIndex, sensor){
                                configurationArray += '"'+ sensor.sensorId + '",';
                                if (!(allSensorsActuators.indexOf(sensor.sensorId) > -1))
                                    allSensorsActuators.push(sensor.sensorId);
                            });
                            configurationArray = configurationArray.substring(0, configurationArray.length - 1) + '];\n';
                        }
                    });

                    if (!oneOptionOnlyFlag)
                        body += '<p></p><br>\n';
                    ws.send(JSON.stringify({ method: 'getActuatorMetadata'}));
                }
            });

            $('#experimentsDiv').change(function() {
                var chosenOption = $('input[name=optradio]:checked').val();
                if (chosenOption == "graasp") {
                    $("#graaspGenerator, #appLinkDiv").show();
                } else {
                    $("#graaspGenerator, #appLinkDiv").hide();
                }
            });

            $("#instructionsButton").click(function() {
                if ($(this).hasClass("active")) {
                    $(this).removeClass("active");
                    $(this).html("Show Instructions");
                    $("#screenshotDiv").hide();
                } else {
                    $(this).addClass("active");
                    $(this).html("Hide Instructions");
                    $("#screenshotDiv").show();
                }
            });

            createGadget = function() {
                //this method is called whenever the sensor metadata is obtained
                var allSensorsActuatorsString = 'var allSensorsActuatorsArray = [ ';
                $.each(allSensorsActuators, function(index, element){
                    allSensorsActuatorsString += '"'+ element + '",';
                });
                allSensorsActuatorsString = allSensorsActuatorsString.substring(0, allSensorsActuatorsString.length-1)+'];\n';
                var optChoice = "";
                if (!oneOptionOnlyFlag) {
                    optChoice += "$('input[type=radio][name=optradio]').change(function() {\n"+
                        "var chosenOption = $('input[name=optradio]:checked').val();\n"+
                        'var logObject = {\n'+
                        '"objectType": "radioButton",\n'+
                        '"displayName": chosenOption\n'+
                        '}\n'+
                        (graasp?'if (actionLoggerReady) actionLogger.logAccess(logObject);\n':'')+
                        'showHideElements(chosenOption);\n'+
                        '});\n';
                }
                var header = "";
                
                if (graasp)
                    header = '<?xml version="1.0" encoding="UTF-8"?>\n'+
                        '<Module>\n'+
                        '<ModulePrefs>\n'+
                        '<Require feature="opensocial-0.9"/>\n'+
                        '<Require feature="osapi"/>\n'+
                        '<Require feature="dynamic-height"/>\n'+
                        '</ModulePrefs>\n'+
                        '<Content type="html">\n'+
                        '<![CDATA[\n';

                header += '<html lang="en">\n'+
                    '<head>\n'+
                    '<meta charset="UTF-8">\n'+
                    '<title>Add title here</title>\n'+
                    '<script type="text/javascript" src="https://code.jquery.com/jquery-1.7.2.js"></sc'+'ript>\n'+
                    '<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"/>\n'+
                    '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.2.0/css/bootstrap-slider.css">\n'+
                    '\n'+
                    '<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/headjs/1.0.3/head.min.js"></scri'+'pt>\n'+
                    '<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.2.0/bootstrap-slider.js"></scr'+'ipt>\n';

                if(graasp)
                    header += 
                        '<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.5/socket.io.min.js"></scr'+'ipt>\n'+
                        '<script type="text/javascript" src="http://shindig2.epfl.ch/ils/main/ils_graaspeu.js"></scri'+'pt>\n'+
                        '<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.js"></scri'+'pt>\n'+
                        '<script type="text/javascript" src="http://shindig2.epfl.ch/ils/metadata/MetadataHandler.js"></scri'+'pt>\n'+
                        '<script type="text/javascript" src="http://shindig2.epfl.ch/ils/applog/ActionLogger.js"></scri'+'pt>\n';

                header += '<style>\n'+
                    'body {\n'+
                    'font-size: 16px;\n'+
                    'line-height: 1.42857143;\n'+
                    'font-family:arial,sans-serif;\n'+
                    'margin-top:40px;\n'+
                    'margin-bottom:20px;\n'+
                    'padding-left: 50px;\n'+
                    'padding-right: 50px;\n';

                if (graasp)
                    header += 'color: white;\n'+
                        'background-color: #5050d2;\n';

                header+= '}\n'+
                    '.led-green-off {\n'+
                    'width: 24px;\n'+
                    'height: 24px;\n'+
                    'background-color: white;\n'+
                    'border-radius: 50%;\n'+
                    'box-shadow: rgba(0, 0, 0, 0.1) 0 -1px 7px 1px, inset #006 0 -1px 9px;\n'+
                    '}\n'+
                    '.btn {\n'+
                    'background-color: white;\n'+
                    'border: black 1px solid;\n'+
                    'color: black;\n'+
                    '}\n'+
                    '.button-on {\n'+
                    'background-color: ' + (graasp? '#6262FF' : 'CornflowerBlue') + ';\n'+
                    '}\n'+
                    'h4 { \n'+
                    'margin-top: 5px;\n'+
                    'margin-bottom: 0px;\n'+
                    'font-size: 16px;\n'+
                    '}\n';

                if (!graasp)
                    header += ".slider-track {\n"+
                        "background-image: -webkit-linear-gradient(top, lightGrey 0%, lightGrey 100%);\n"+
                        "}\n"+
                        ".slider-selection {\n"+
                        "background-image: -webkit-linear-gradient(top, CornflowerBlue 0%, CornflowerBlue 100%);\n"+
                        "}\n"+
                        ".slider-handle {\n"+
                        "background-image: -webkit-linear-gradient(top, CornflowerBlue 0%, CornflowerBlue 100%);\n"+
                        "}\n";

                if (graasp)
                    header += '#saveButton {\n'+
                        'background-color: green;\n'+
                        'color: white;\n'+
                        '}\n';

                header += '</style>\n'+
                    '</head>\n';

                if (graasp)
                    body += '<button class="btn" background-color="green" id="saveButton">Save Data</button><span id="saveIndicator" display="none"></span>';

                scriptHeader = '<script>\n'+
                    'head.ready(function () {\n'+
                    'var ip = "'+ ip +'";\n'+
                    'var port = "'+ port +'";\n'+
                    'var connected = 0;\n'+
                    'var sensorRequest;\n'+
                    'var ws = new WebSocket("ws://" + ip + ":" + port);\n'+
                    'var dataSet = {dataSourceColumns : [{unit:"s"}], dataTable: {cols: [{id:"time", label:"time", pattern:"", type:"number"}], rows:[] } }\n';

                if (graasp)    
                    scriptHeader += 'gadgets.window.adjustHeight(); \n'+
                        'var actionLogger;\n'+
                        'var actionLoggerReady = 0;\n'+
                        'var metadata;\n'+
                        'ils.getAppContextParameters(function(data){\n'+
                        'if (data.error)    return;\n'+
                        'metadata = data;\n'+
                        'if (!metadata.storageId)\n'+
                        'metadata.storageId = metadata.provider.inquiryPhaseId;\n'+
                        'metadata.target.objectType = "dataSet";\n'+
                        'metadata.target.displayName = "Experiment_" + Date.now();\n'+
                        'new window.golab.ils.metadata.GoLabMetadataHandler(metadata, function(shouldBeNull,metadataHandler) {\n'+
                        'actionLogger = new window.ut.commons.actionlogging.ActionLogger(metadataHandler);\n'+
                        'actionLogger.setLoggingTarget("opensocial");\n'+
                        'actionLoggerReady = 1;\n'+
                        '});\n'+
                        '});\n';

                var tail = '});\n'+
                    '</scri'+'pt>\n'+
                    '</body>\n'+
                    '</html>\n';

                if (graasp)
                    tail += ']'+']>\n'+
                        '</Content>\n'+
                        '</Module>';

                var gadget = header + body + scriptHeader + showHideElements + configurationArray + actuatorsArray + actuators  + allSensorsActuatorsString + initialOption + optChoice + sensorsArray + onOpen + booleanArray + (graasp?updateContent:'') + videoCode + onMessage + tail;
                var blob = new Blob([gadget], {type: 'application/octet-stream'});

                if (!saveToGraasp) {
                    if (graasp)
                        saveAs(blob, 'gadget.xml');
                    else
                        saveAs(blob, 'gadget.html');
                } else {
                    $("#appLinkDiv").empty();
                    $("instructionsDiv").hide();
                    ils.getUniqueName("gadget.xml", function(fileName) {
                        var params = {
                            "document": {
                                "parentType": metadata.storageType,
                                "parentSpaceId": metadata.storageId,
                                "fileName": fileName,
                                "content": gadget,
                                "metadata": metadata
                            }
                        };
                        osapi.documents.create(params).execute(function(resource){
                            if (!resource || !resource.id || resource.error) {
                                $("#errorDiv").append("You do not have the permissions to add files to this space.<br>");
                                $("#errorDiv").append("Please download the gadget instead.");
                                return;
                            }
                            $("#appLinkDiv").append("<hr>");
                            $("#appLinkDiv").append("You can add the gadget as an app using the following link as App URL: <br>");
                            $("#appLinkDiv").append(resource.originUrl+"<br>");
                            if (isPrivate)
                                $("#appLinkDiv").append("<br><p><b>NOTE: <b> Make sure you change the visibility of this space to public</p>");
                            $("#instructionsDiv").show();
                        });
                    });
                }

                if (navigator.vendor && navigator.vendor.indexOf('Apple') > -1 && navigator.userAgent && !navigator.userAgent.match('CriOS') && !saveToGraasp)
                    alert('Please rename the downloaded file to ' + (graasp?'gadget.xml':'gadget.html'));

                oneOptionOnlyFlag = 1;
                body = '<body>\n';
                actuators = '';
                onOpen = 'ws.onopen = function() { \n connected = 1; \n';
                booleanArray = 'var booleanArray = [ ';
                allSensorsActuators = [];
                configurationArray = 'var configurationArray = [];\nvar dataValues = [];\ndataValues["time"] = 0;\n';
                graasp = 1;
                actuatorsArray = '';
                sensorsArray = 'var sensorsArray = [];\n';
                oneOptionAvailable = 0;
                saveToGraasp = 0;
                videoCode = 'FF=(navigator.userAgent.search("Firefox") >= 0);';
            };

            var updateContent = 'window.setInterval(function() {\n'+
                'var newValues = {c:[]};\n'+
                '$.each(dataSet.dataTable.cols, function(index,column){\n'+
                'newValues.c.push({v:dataValues[column.id],f:dataValues[column.id]});\n'+
                '});\n'+
                'dataSet.dataTable.rows.push(newValues);\n'+
                'dataValues["time"] = dataValues["time"] + 1;\n'+
                '},1000);\n'+
                '$("#saveButton").click(function(){\n'+
                'ils.createResource ("experimentdata", dataSet, metadata, function(resource){\n'+
                'if (resource.error) return console.error (resource.error);\n'+
                '$("#saveIndicator").html("&nbsp;&nbsp Experiment Data Saved !");\n'+
                'setTimeout(function() { $("#saveIndicator").html(""); }, 1500);\n'+
                '});\n'+
                '});\n'; 

            var onMessage = 'ws.onmessage = function(event) {\n'+
                'var data = event.data;\n'+
                'var msg;\n'+
                'try {\n'+
                'msg = JSON.parse(data);\n'+
                'if (msg.method == "getSensorData") {\n'+
                'if (msg.responseData) {\n'+
                '$.each(msg.responseData.data, function(index, value) {\n'+
                'valueName = sensorsArray[msg.sensorId][index];\n'+
                'var valueVal = value\n'+
                'dataValues[valueName] = valueVal;\n'+
                'if (booleanArray.indexOf(valueName) > (-1)) {\n'+
                'if (valueVal){\n'+
                '$("#"+valueName).css("background-color", "#228B22");\n'+
                '} else {\n'+
                '$("#"+valueName).css("background-color", "white");\n'+
                '}\n'+
                '} else {\n'+
                '$("#"+valueName).html(valueVal);\n'+
                '}\n'+
                '});\n'+
                '}\n'+
                '}\n'+
                '} catch(e) {\n'+
                'console.log(e);\n'+
                '}\n'+
                '};\n';

            var showHideElements = 'var showHideElements = function (chosenOption) {\n'+
                '$.each(allSensorsActuatorsArray, function(index, element) {\n'+
                'if (configurationArray[chosenOption].indexOf(element)>(-1)) {\n'+
                '$("#"+element+"Div").show();\n'+
                '}\n'+
                'else {\n'+
                '$("#"+element+"Div").hide();\n'+
                '}\n'+
                '});\n'+
                '}\n';
            });
        </script>
    </body>
</html>
]]>
</Content>
</Module>