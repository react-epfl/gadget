<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="Gyroscope (demo)" 
                author_email="evgeny.bogdanov@epfl.ch" 
                author="Evgeny Bogdanov" 
                description="This gadget shows a rotating gyroscope model. When it is added to a space, it displays people in the space that can collaborate over this gyroscope. This is a demo gadget. The real gadget (https://shindig2.epfl.ch/gadget/gyroscope.xml) works only in spaces enabled containers (for example Graasp - https://shindig2.epfl.ch )"
                width="500"
                height="500"
                thumbnail="https://shindig2.epfl.ch/gadget/demo/gyroscope/thumbnail.png"
                screenshot="https://shindig2.epfl.ch/gadget/demo/gyroscope/screenshot.png">
    <Require feature="osapi" />
    <Require feature="dynamic-height" />
  </ModulePrefs>
  <Content view="preview" type="url" href="https://shindig2.epfl.ch/gadget/demo/gyroscope/screenshot.png"/>
  <Content type="html" view="default,canvas,home,profile"><![CDATA[

<style type="text/css">
  .gadgets-gadget{width: 100%;}
  .item{padding: 5px;margin: 5px; border-radius:5px;
    cursor:pointer; margin-left: 15px; font-size: 12px;
    width: 84px;
    height: 52px;
    display:inline-block;
    }
  .item div{
    text-align: center;
  }
  .title{border-top: 1px solid #aaa; font-size: 14px; text-indent: 5px; background-color: #ddd;
    margin-bottom: 5px; padding: 3px}
    
  .people {
    border: solid 1px rgba(102,153,255,0.7); }

  .item {
    background: -moz-linear-gradient(top, #fefefe, #eeeeee);
    background: -webkit-gradient(linear, left top, left bottom, from(#fefefe), to(#eeeeee)); }
  .item:hover {
    background: -moz-linear-gradient(top, #eeeeee, #fefefe);
    background: -webkit-gradient(linear, left top, left bottom, from(#eeeeee), to(#fefefe)); }
  
  .name{
      height: 14px;
      width: 80px;
      overflow:hidden;
  } 
  .thumb{
    margin-bottom:5px;
  }
</style>
  
<div id="container">
<canvas id="webgl" style="border: none;" width="500" height="500"></canvas>
<div id="people"></canvas>
</div>

<script type="text/javascript" src="https://d2hv4ldeur9lfv.cloudfront.net/opensocial-jquery-1.3.2.5.min.js"></script>
<!-- <script type="text/javascript" src="https://shindig2.epfl.ch/gadgets/js/shindig-container:rpc.js?c=1&debug=1&nocache=1"></script> -->

<script type="text/javascript" src="https://shindig2.epfl.ch/gadget/libs/glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="https://shindig2.epfl.ch/gadget/libs/webgl-utils.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    #ifdef GL_ES
    precision highp float;
    #endif

    varying vec4 vColor;
    varying vec3 vLightWeighting;

    uniform sampler2D uSampler;

    void main(void) {
        gl_FragColor = vec4(vColor.rgb * vLightWeighting, vColor.a);
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;
    attribute vec3 aVertexNormal;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform mat3 uNMatrix;

    uniform vec3 uAmbientColor;

    uniform vec3 uLightingDirection;
    uniform vec3 uDirectionalColor;

    varying vec4 vColor;
    uniform bool uUseLighting;

    varying vec3 vLightWeighting;

    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vColor = aVertexColor;

        if (!uUseLighting) {
            vLightWeighting = vec3(1.0, 1.0, 1.0);
        } else {
            vec3 transformedNormal = uNMatrix * aVertexNormal;
            float directionalLightWeighting = max(dot(transformedNormal, uLightingDirection), 0.0);
            vLightWeighting = uAmbientColor + uDirectionalColor * directionalLightWeighting;
        }
    }
</script>


<script type="text/javascript">

    var gl;

    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }


    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
        gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
        shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
        gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
        shaderProgram.nMatrixUniform = gl.getUniformLocation(shaderProgram, "uNMatrix");
        shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");
        shaderProgram.useLightingUniform = gl.getUniformLocation(shaderProgram, "uUseLighting");
        shaderProgram.ambientColorUniform = gl.getUniformLocation(shaderProgram, "uAmbientColor");
        shaderProgram.lightingDirectionUniform = gl.getUniformLocation(shaderProgram, "uLightingDirection");
        shaderProgram.directionalColorUniform = gl.getUniformLocation(shaderProgram, "uDirectionalColor");
    }


    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }


    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
        
        var normalMatrix = mat3.create();
        mat4.toInverseMat3(mvMatrix, normalMatrix);
        mat3.transpose(normalMatrix);
        gl.uniformMatrix3fv(shaderProgram.nMatrixUniform, false, normalMatrix);
    }


    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }


    var cube1VertexPositionBuffer;
    var cube1VertexColorBuffer;
    var cube1VertexIndexBuffer;
    var cube1VertexNormalBuffer;
    var cube2VertexPositionBuffer;
    var cube2VertexColorBuffer;
    var cube2VertexIndexBuffer;
    var cube2VertexNormalBuffer;
    var cubeVertexPositionBuffer;
    var cubeVertexColorBuffer;
    var cubeVertexIndexBuffer;
    var cubeVertexNormalBuffer;

    function initBuffers() {
      // cube1
      cube1VertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cube1VertexPositionBuffer);
      vertices = [
        // Front face
        0.0, -0.1,  0.1,
         2.0, -0.1,  0.1,
         2.0,  0.1,  0.1,
        0.0,  0.1,  0.1,

        // Back face
        0.0, -0.1, -0.1,
        0.0,  0.1, -0.1,
         2.0,  0.1, -0.1,
         2.0, -0.1, -0.1,

        // Top face
        0.0,  0.1, -0.1,
        0.0,  0.1,  0.1,
         2.0,  0.1,  0.1,
         2.0,  0.1, -0.1,

        // Bottom face
        0.0, -0.1, -0.1,
         2.0, -0.1, -0.1,
         2.0, -0.1,  0.1,
        0.0, -0.1,  0.1,

        // Right face
         2.0, -0.1, -0.1,
         2.0,  0.1, -0.1,
         2.0,  0.1,  0.1,
         2.0, -0.1,  0.1,

        // Left face
        0.0, -0.1, -0.1,
        0.0, -0.1,  0.1,
        0.0,  0.1,  0.1,
        0.0,  0.1, -0.1
        ]
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        cube1VertexPositionBuffer.itemSize = 3;
        cube1VertexPositionBuffer.numItems = 24;
        
        cube1VertexNormalBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cube1VertexNormalBuffer);
        var vertexNormals = [
            // Front face
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,

            // Back face
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,

            // Top face
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // Bottom face
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,

            // Right face
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,

            // Left face
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);
        cube1VertexNormalBuffer.itemSize = 3;
        cube1VertexNormalBuffer.numItems = 24;
        

        cube1VertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cube1VertexColorBuffer);
        colors = [
          [0.5, 0.5, 1.0, 1.0], // Front face
          [0.5, 0.5, 1.0, 1.0], // Back face
          [0.5, 0.5, 1.0, 1.0], // Top face
          [0.5, 0.5, 1.0, 1.0], // Bottom face
          [0.5, 0.5, 1.0, 1.0], // Right face
          [0.5, 0.5, 1.0, 1.0]  // Left face
        ];
        var unpackedColors = [];
        for (var i in colors) {
            var color = colors[i];
            for (var j=0; j < 4; j++) {
                unpackedColors = unpackedColors.concat(color);
            }
        }
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
        cube1VertexColorBuffer.itemSize = 4;
        cube1VertexColorBuffer.numItems = 24;

        cube1VertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cube1VertexIndexBuffer);
        var cubeVertexIndices = [
            0, 1, 2,      0, 2, 3,    // Front face
            4, 5, 6,      4, 6, 7,    // Back face
            8, 9, 10,     8, 10, 11,  // Top face
            12, 13, 14,   12, 14, 15, // Bottom face
            16, 17, 18,   16, 18, 19, // Right face
            20, 21, 22,   20, 22, 23  // Left face
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        cube1VertexIndexBuffer.itemSize = 1;
        cube1VertexIndexBuffer.numItems = 36;
        
        // cube2
        cube2VertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexPositionBuffer);
        vertices = [
          // Front face
          0.0, -0.1,  0.1,
           1.0, -0.1,  0.1,
           1.0,  0.1,  0.1,
          0.0,  0.1,  0.1,

          // Back face
          0.0, -0.1, -0.1,
          0.0,  0.1, -0.1,
           1.0,  0.1, -0.1,
           1.0, -0.1, -0.1,

          // Top face
          0.0,  0.1, -0.1,
          0.0,  0.1,  0.1,
           1.0,  0.1,  0.1,
           1.0,  0.1, -0.1,

          // Bottom face
          0.0, -0.1, -0.1,
           1.0, -0.1, -0.1,
           1.0, -0.1,  0.1,
          0.0, -0.1,  0.1,

          // Right face
           1.0, -0.1, -0.1,
           1.0,  0.1, -0.1,
           1.0,  0.1,  0.1,
           1.0, -0.1,  0.1,

          // Left face
          0.0, -0.1, -0.1,
          0.0, -0.1,  0.1,
          0.0,  0.1,  0.1,
          0.0,  0.1, -0.1
          ]
          gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
          cube2VertexPositionBuffer.itemSize = 3;
          cube2VertexPositionBuffer.numItems = 24;
          
          cube2VertexNormalBuffer = gl.createBuffer();
          gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexNormalBuffer);
          var vertexNormals = [
              // Front face
               0.0,  0.0,  1.0,
               0.0,  0.0,  1.0,
               0.0,  0.0,  1.0,
               0.0,  0.0,  1.0,

              // Back face
               0.0,  0.0, -1.0,
               0.0,  0.0, -1.0,
               0.0,  0.0, -1.0,
               0.0,  0.0, -1.0,

              // Top face
               0.0,  1.0,  0.0,
               0.0,  1.0,  0.0,
               0.0,  1.0,  0.0,
               0.0,  1.0,  0.0,

              // Bottom face
               0.0, -1.0,  0.0,
               0.0, -1.0,  0.0,
               0.0, -1.0,  0.0,
               0.0, -1.0,  0.0,

              // Right face
               1.0,  0.0,  0.0,
               1.0,  0.0,  0.0,
               1.0,  0.0,  0.0,
               1.0,  0.0,  0.0,

              // Left face
              -1.0,  0.0,  0.0,
              -1.0,  0.0,  0.0,
              -1.0,  0.0,  0.0,
              -1.0,  0.0,  0.0
          ];
          gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);
          cube2VertexNormalBuffer.itemSize = 3;
          cube2VertexNormalBuffer.numItems = 24;
          

          cube2VertexColorBuffer = gl.createBuffer();
          gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexColorBuffer);
          colors = [
            [0.0, 1.0, 0.0, 1.0], // Front face
            [0.0, 1.0, 0.0, 1.0], // Back face
            [0.0, 1.0, 0.0, 1.0], // Top face
            [0.0, 1.0, 0.0, 1.0], // Bottom face
            [0.0, 1.0, 0.0, 1.0], // Right face
            [0.0, 1.0, 0.0, 1.0]  // Left face
          ];
          var unpackedColors = [];
          for (var i in colors) {
              var color = colors[i];
              for (var j=0; j < 4; j++) {
                  unpackedColors = unpackedColors.concat(color);
              }
          }
          gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
          cube2VertexColorBuffer.itemSize = 4;
          cube2VertexColorBuffer.numItems = 24;

          cube2VertexIndexBuffer = gl.createBuffer();
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cube2VertexIndexBuffer);
          var cubeVertexIndices = [
              0, 1, 2,      0, 2, 3,    // Front face
              4, 5, 6,      4, 6, 7,    // Back face
              8, 9, 10,     8, 10, 11,  // Top face
              12, 13, 14,   12, 14, 15, // Bottom face
              16, 17, 18,   16, 18, 19, // Right face
              20, 21, 22,   20, 22, 23  // Left face
          ];
          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
          cube2VertexIndexBuffer.itemSize = 1;
          cube2VertexIndexBuffer.numItems = 36;
        
        
        // cube 0
        cubeVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        vertices = [
            // Front face
            -2.0, -0.1,  0.1,
             2.0, -0.1,  0.1,
             2.0,  0.1,  0.1,
            -2.0,  0.1,  0.1,

            // Back face
            -2.0, -0.1, -0.1,
            -2.0,  0.1, -0.1,
             2.0,  0.1, -0.1,
             2.0, -0.1, -0.1,

            // Top face
            -2.0,  0.1, -0.1,
            -2.0,  0.1,  0.1,
             2.0,  0.1,  0.1,
             2.0,  0.1, -0.1,

            // Bottom face
            -2.0, -0.1, -0.1,
             2.0, -0.1, -0.1,
             2.0, -0.1,  0.1,
            -2.0, -0.1,  0.1,

            // Right face
             2.0, -0.1, -0.1,
             2.0,  0.1, -0.1,
             2.0,  0.1,  0.1,
             2.0, -0.1,  0.1,

            // Left face
            -2.0, -0.1, -0.1,
            -2.0, -0.1,  0.1,
            -2.0,  0.1,  0.1,
            -2.0,  0.1, -0.1
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        cubeVertexPositionBuffer.itemSize = 3;
        cubeVertexPositionBuffer.numItems = 24;
        
        cubeVertexNormalBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexNormalBuffer);
        var vertexNormals = [
            // Front face
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,
             0.0,  0.0,  1.0,

            // Back face
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,
             0.0,  0.0, -1.0,

            // Top face
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,
             0.0,  1.0,  0.0,

            // Bottom face
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,
             0.0, -1.0,  0.0,

            // Right face
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,
             1.0,  0.0,  0.0,

            // Left face
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0,
            -1.0,  0.0,  0.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);
        cubeVertexNormalBuffer.itemSize = 3;
        cubeVertexNormalBuffer.numItems = 24;
        

        cubeVertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        colors = [
            [1.0, 0.0, 0.0, 1.0], // Front face
            [1.0, 0.0, 0.0, 1.0], // Back face
            [1.0, 0.0, 0.0, 1.0], // Top face
            [1.0, 0.0, 0.0, 1.0], // Bottom face
            [1.0, 0.0, 0.0, 1.0], // Right face
            [1.0, 0.0, 0.0, 1.0]  // Left face
        ];
        var unpackedColors = [];
        for (var i in colors) {
            var color = colors[i];
            for (var j=0; j < 4; j++) {
                unpackedColors = unpackedColors.concat(color);
            }
        }
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
        cubeVertexColorBuffer.itemSize = 4;
        cubeVertexColorBuffer.numItems = 24;

        cubeVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        var cubeVertexIndices = [
            0, 1, 2,      0, 2, 3,    // Front face
            4, 5, 6,      4, 6, 7,    // Back face
            8, 9, 10,     8, 10, 11,  // Top face
            12, 13, 14,   12, 14, 15, // Bottom face
            16, 17, 18,   16, 18, 19, // Right face
            20, 21, 22,   20, 22, 23  // Left face
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        cubeVertexIndexBuffer.itemSize = 1;
        cubeVertexIndexBuffer.numItems = 36;
    }


    var rCube1 = 0;
    var rCube2 = 0;

    function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

        mat4.identity(mvMatrix);
        
        var lighting = true;
         gl.uniform1i(shaderProgram.useLightingUniform, lighting);
         if (lighting) {
             gl.uniform3f(
                 shaderProgram.ambientColorUniform,
                 0.2,0.2,0.2
             );

             var lightingDirection = [-0.25, -0.25, -1.0];
             var adjustedLD = vec3.create();
             vec3.normalize(lightingDirection, adjustedLD);
             vec3.scale(adjustedLD, -1);
             gl.uniform3fv(shaderProgram.lightingDirectionUniform, adjustedLD);

             gl.uniform3f(
                 shaderProgram.directionalColorUniform,
                 0.8,0.8,0.8
             );
         }
        

        // cube0 (static one)
        mat4.translate(mvMatrix, [0, 1.0, -8.0]);
        mat4.rotate(mvMatrix, degToRad(90), [1, 1, 1]);
        
        mvPushMatrix();
        // mat4.rotate(mvMatrix, degToRad(rCube), [1, 1, 1]);
        mat4.translate(mvMatrix, [-2.0, 0.0, 0.0]);

        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexNormalBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, cubeVertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

        mvPopMatrix();
        
        // cube 1 (rotate around static)
        mvPushMatrix();
        // mat4.rotate(mvMatrix, degToRad(90), [1, 1, 1]);
        mat4.rotate(mvMatrix, degToRad(90), [0, 0, 1]);
        mat4.rotate(mvMatrix, degToRad(rCube1), [0, 1, 0]);

        gl.bindBuffer(gl.ARRAY_BUFFER, cube1VertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cube1VertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        gl.bindBuffer(gl.ARRAY_BUFFER, cube1VertexNormalBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, cube1VertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);
        

        gl.bindBuffer(gl.ARRAY_BUFFER, cube1VertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cube1VertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cube1VertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cube1VertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

        // cube2 (rotates around cube1)
        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(90), [0, 1, 0]);
        mat4.translate(mvMatrix, [0.0, 0.0, 2.0]);
        mat4.rotate(mvMatrix, degToRad(rCube2), [0, 0, 1]);

        gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cube2VertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        
        gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexNormalBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, cube2VertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);
        

        gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cube2VertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cube2VertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cube2VertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

        mvPopMatrix();
        
        mvPopMatrix();
    }


    var lastTime = 0;

    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;

            rCube1 -= (10 * elapsed) / 1000.0;
            rCube2 -= (75 * elapsed) / 1000.0;
        }
        lastTime = timeNow;
    }


    function tick() {
        requestAnimFrame(tick);
        drawScene();
        animate();
    }


    function webGLStart() {
        var canvas = document.getElementById("webgl");
        initGL(canvas);
        initShaders()
        initBuffers();

        gl.clearColor(0.87, 0.87, 0.87, 1.0);
        // gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);

        tick();
    }

</script>

<script type="text/javascript">
var isOwner = false;

// gets the data and calls build for container
var initialize = function() {
  // start webgl engine
  webGLStart(); 
  
  gadgets.window.adjustHeight();

};

</script>

<script type="text/javascript">
gadgets.util.registerOnLoadHandler(initialize);
</script>


  ]]></Content>
</Module>