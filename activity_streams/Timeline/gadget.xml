<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="Live activity stream"
                author_email="aubry.cholleton@epfl.ch"
                author="Aubry Cholleton"
                description="Displays a live activity stream of the current Space">
    <Require feature="opensocial-0.9"/>
    <Require feature="osapi"/>
    <Require feature="dynamic-height"/>
</ModulePrefs>
<Content type="html"><![CDATA[
<style> 
body {
  background-color: transparent;
  color:#666;
  margin-top:10px
  font-family: "Helvetica Neue", arial, sans-serif;
}

.item {
  margin: 15px;
  padding: 0px;
  background-color: #EFF1F2;
  border-radius: 10px;
  box-shadow: -1px 2px 5px 1px rgba(0, 0, 0, 0.7); 
}

.item > .moment {
  padding: 5px;
  background-color: #DFE3E6;
  border-radius: 10px 10px 0px 0px;
  font-weight:bold;
}

.item > .core > .thumb {
  float: left;
  margin: 8px;
  display: block;
  width: 40px;
}

.item > .core > .sentence {
  margin: 8px;
  padding-bottom: 10px;
}
.act_content {
  margin: 8px 8px 8px 80px;
  padding: 10px;
  background-color: #FCFCFC;
  border-radius: 10px;
}
.clear {
  clear: both;
  height: 0; overflow: hidden;
}
</style>

<script class="include" language="javascript" type="text/javascript" src="../../libs/jquery-1.8.0.min.js"></script>
<script class="include" language="javascript" type="text/javascript" src="../../libs/moment/moment.min.js"></script>
<script type="text/javascript">
moment().format();
var lastUpdate = moment();



function createTimeline(response) {

  updateTimeline(response);

  setTimeout(function () {
gadgets.window.adjustHeight();
    }, 500);

  var timer = setInterval(updateActivities, 4000);

  //updateActivities();
  

}

function updateTimeline(acts) {
  var content = null;
  var date = new Date;
  activities = acts.entry;
  actions = ["add", "update", "join", "remove", "delete"];
  //Faire la boucle à l'envers et faire des prepend à chaque itération
  for(var i = (activities.length-1); i >= 0 ; i--) {
    if ($.inArray(activities[i].verb, actions) != -1) {
      date = new Date(activities[i].published);
      var item = "<div class='item' id='item"+i+"'>"
        + "<div class = 'moment'> "
        + moment(date).fromNow()
        + "</div>"
        + "<div class='core'>";
      image = getActivityImage(activities[i]);
      if(image) {
        item += "<img src = '"+getActivityImage(activities[i])+"' class='thumb' / >";
      }
      item += "<div class = 'sentence'> "
        + activitySentence(activities[i])
        + "</div>";

      content = getObjectContent(activities[i].object);
      if(content) {
        item +="<div class = 'act_content'>"
          +content
          +"</div>";
      }

      item += "</div>"
          +"<div class='clear'></div></div>";
      if($('.item').length >= 7) {
        $('.item').last().fadeOut("slow", function() { $(this).remove(); });
      }
      $('#timeline').prepend($(item).fadeIn("slow"));
      gadgets.window.adjustHeight();
    }
  }
  gadgets.window.adjustHeight();
}

function activitySentence(activity) {

  var sentence = "";
  var displayName = getObjectDisplayName(activity.actor);
  sentence += buildObjectLink(displayName.charAt(0).toUpperCase() + displayName.slice(1), activity.actor);
  sentence += " "+getActivityVerb(activity);
  if (activity.verb != "add" || activity.object.objectType != "Comment")
    sentence += " "+buildObjectLink(getObjectDisplayName(activity.object), activity.object);
  if(activity.target) {
    if(activity.verb == "delete")
      sentence += " from";
    else if (activity.verb == "add" && activity.object.objectType == "Comment")
      sentence += " on";
    else
      sentence += " to";
      sentence += " "+buildObjectLink(getObjectDisplayName(activity.target), activity.target)+".";
  } else
    sentence += ".";
  
  return sentence;
}

function getActivityVerb(activity) {
  var actions_past = {"add" : "added", "update" : "updated", "join" : "joined", "delete" : "deleted"};

  if(activity.verb == "add" && activity.object.objectType == "Comment")
    return "commented";
  var verb = actions_past[activity.verb];
  if(verb)
    return verb;
  return "did something with"
}

function getObjectDisplayName(object){
  if (object.id == undefined)
    return "a deleted object";

  if (isObjectContext(object.id))
    return "this "+object.objectType.toLowerCase();

  if (object.id.split('/').pop() == window.viewerId) {
    if (object.objectType == "User")
      return "you";
    else if(object.objectType == "Space")
      return "your space"
  }

  if (object.displayName)
    return object.displayName;

  if (object.objectType)
    return "a "+object.objectType.toLowerCase();
  
  return "something"
}

function buildObjectLink(name, object){
  if (object.url)
    return "<a href='"+object.url+"' target='_top'>"+name+"</a>";
  else
    return name;
}

function getObjectContent(object){
  if (object.content)
    return object.content;
  else
    return null;
}

function getActivityImage(activity){
  if(activity.image)
    return activity.image.url;
  if(activity.object.image)
    return activity.object.image.url;
  if(activity.actor.image)
    return activity.actor.image.url;
  if(activity.target && activity.target.image)
    return activity.target.image.url;
  if(activity.generator && activity.generator.image)
    return activity.generator.image.url;
  return null;

}

function isObjectContext(objectIri) {
  var objectId = -1;
  if (objectIri != undefined) {
    objectId=objectIri.split('/').pop();
  } else {
    return false;
  }

  if (objectId == gcontextId) {
    return true;
  } else {
    return false;
  }
}

function updateActivities(){
  var today = new Date();
  var lastWeek = new Date(today.getFullYear(), today.getMonth(), today.getDate()-7);
  osapi.activitystreams.get({contextId: window.gcontextId, contextType: window.gcontextType, updatedSince:window.lastUpdate.format(), count:7, sortOrder: "descending"}).execute(function(response){
    lastUpdate = moment();
    updateTimeline(response);
  });
}


function loadActivities(){
  osapi.activitystreams.get({contextId: window.gcontextId, contextType: window.gcontextType, count:7, sortOrder: "descending"}).execute(function(response){
    lastUpdate = moment();
    createTimeline(response);
  });
}

function findContext(){
  var batch = osapi.newBatch();
  batch.add('context', osapi.context.get());
  batch.add('viewer', osapi.people.getViewer());
  batch.execute(function(response){
    gcontextId = response.context.contextId;
    gcontextType = response.context.contextType;
    viewerId = response.viewer.id;
    loadActivities();
  });
}


gadgets.util.registerOnLoadHandler(findContext);

</script>
<h1>Live space stream</h1>
<div id="timeline"></div>
]]></Content>
</Module>