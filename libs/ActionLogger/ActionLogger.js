// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (window.ut == null) {
    window.ut = {};
  }

  if ((_base = window.ut).commons == null) {
    _base.commons = {};
  }

  window.ut.commons.actionlogging = window.ut.commons.actionlogging || {};

  window.ut.commons.actionlogging.ActionLogger = (function() {
    function ActionLogger(metadataHandler) {
      this.log = __bind(this.log, this);
      var error;
      console.log("Initializing ActionLogger.");
      console.log("...setting default logging target: nullLogging.");
      try {
        metadataHandler.getMetadata();
        this.metadataHandler = metadataHandler;
      } catch (_error) {
        error = _error;
        throw "ActionLogger needs a MetadataHandler at construction!";
      }
      this.loggingTarget = this.nullLogging;
    }

    ActionLogger.prototype.setLoggingTarget = function(newLoggingTarget) {
      return this.loggingTarget = newLoggingTarget;
    };

    ActionLogger.prototype.setLoggingTargetByName = function(newLoggingTargetName) {
      console.log("ActionLogger: setting logging target (by name) to " + newLoggingTargetName);
      if (newLoggingTargetName === "null") {
        return this.loggingTarget = this.nullLogging;
      } else if (newLoggingTargetName === "console") {
        return this.loggingTarget = this.consoleLogging;
      } else if (newLoggingTargetName === "consoleShort") {
        return this.loggingTarget = this.consoleLoggingShort;
      } else if (newLoggingTargetName === "dufftown") {
        return this.loggingTarget = this.dufftownLogging;
      } else if (newLoggingTargetName === "opensocial") {
        return this.loggingTarget = this.opensocialLogging;
      } else {
        console.log("ActionLogger: unknown logging target, setting to 'null'.");
        return this.loggingTarget = this.nullLogging;
      }
    };

    ActionLogger.prototype.log = function(verb, object) {
      var activityStreamObject, error, verbAccepted, verbKey, verbValue, _ref;
      verbAccepted = false;
      _ref = this.verbs;
      for (verbKey in _ref) {
        verbValue = _ref[verbKey];
        if (verb === verbValue) {
          verbAccepted = true;
        }
      }
      if (!verbAccepted) {
        console.warn("ActionLogger: unknown verb: " + verb);
      }
      try {
        activityStreamObject = {};
        activityStreamObject.published = new Date().toISOString();
        activityStreamObject.actor = this.metadataHandler.getActor();
        activityStreamObject.verb = verb;
        activityStreamObject.object = object;
        activityStreamObject.target = this.metadataHandler.getTarget();
        activityStreamObject.generator = this.metadataHandler.getGenerator();
        activityStreamObject.provider = this.metadataHandler.getProvider();
        return this.loggingTarget(activityStreamObject);
      } catch (_error) {
        error = _error;
        console.warn("something went wrong during logging:");
        return console.warn(error);
      }
    };

    ActionLogger.prototype.nullLogging = function(action) {};

    ActionLogger.prototype.consoleLogging = function(activityStreamObject) {
      return console.log(JSON.stringify(activityStreamObject, void 0, 2));
    };

    ActionLogger.prototype.consoleLoggingShort = function(activityStreamObject) {
      return console.log("ActionLogger: " + activityStreamObject.verb + " " + activityStreamObject.object.objectType + ", id: " + activityStreamObject.object.id);
    };

    ActionLogger.prototype.opensocialLogging = function(activityStreamObject) {
      var logObject;
      if (osapi !== void 0) {
        logObject = {
          "userId": "@viewer",
          "groupId": "@self",
          activity: activityStreamObject
        };
        console.log("ActionLogger: logging to Graasp: " + activityStreamObject.verb + " " + activityStreamObject.object.objectType + ", id: " + activityStreamObject.object.id);
        return osapi.activitystreams.create(logObject).execute(function(response) {
          if (response.id !== void 0) {
            return console.log("ActionLogger: sucessfully logged via osapi, response.id: " + response.id);
          } else {
            console.log("ActionLogger: something went wrong when logging via osapi:");
            return console.log(response);
          }
        });
      } else {
        return console.log("ActionLogger: can't log, osapi is undefined.");
      }
    };

    ActionLogger.prototype.dufftownLogging = function(activityStreamObject) {
      var url;
      url = "http://go-lab.collide.info/activity";
      console.log("ActionLogger: logging to " + url + ": " + activityStreamObject.verb + " " + activityStreamObject.object.objectType + ", id: " + activityStreamObject.object.id);
      return $.ajax({
        type: "POST",
        url: url,
        data: JSON.stringify(activityStreamObject),
        contentType: "application/json",
        success: function(responseData, textStatus, jqXHR) {
          return console.log("POST actionlog success, response: " + responseData);
        },
        error: function(responseData, textStatus, errorThrown) {
          console.log("POST actionlog failed, response:");
          return console.log(responseData);
        }
      });
    };

    ActionLogger.prototype.verbs = {
      application_started: "application_started",
      access: "access",
      create: "create",
      add: "add",
      update: "update",
      "delete": "delete",
      load: "read",
      save: "save",
      phase_changed: "phase_changed"
    };

    return ActionLogger;

  })();

}).call(this);

/*
//@ sourceMappingURL=ActionLogger.map
*/
