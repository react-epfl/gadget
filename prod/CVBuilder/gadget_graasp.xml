<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="CVBuilder gadget" 
                author_email="freddy.limpens@epfl.ch" 
                author="Freddy Limpens	" 
                description="multi tab form-style gaget to edit and export nicely typed Europass-compatible CVs"
                width="500"
                height="500"
                thumbnail="http://shindig2.epfl.ch/gadget/prod/CVBuilder/thumbnail.gif"
                screenshot="http://shindig2.epfl.ch/gadget/prod/CVBuilder/screenshot.png">
    <Require feature="osapi" />
    <Require feature="dynamic-height" />
  </ModulePrefs>
  <Content type="html" view="default,canvas,home,profile">
<!-- ** DEV NOTES ** 

1. On load, should load saved data and fills in contact form and prepare data for display 
in tables for other tabs
2. big export button should trigger following process:
- turn current data into europass XML format
- send XML to Europass Web Services 
- [OPTIONAL: display a load/progress bar to show user] 
that data is being processed 
- serve the pdf for download

#####  TODO   ######
- update contact data to "people" data and not appdata

#NOTE01: for addresses and emails, data will be saved with a type "CVData" so that it does not interfere 
with container functions. To avoid asking the user fill in again this fields, th CVBuilder widget will
check if adress/email already exist in person data, and will pre-fill the fields so that the user only 
have to update. However, this would not work for "name" field and in this case CVBuilder will modify 
this info globally. 

#NOTE02: which contact data fields can have a type (so that we can recognize them as being reserved for 
the CV builder, see http://opensocial-resources.googlecode.com/svn/spec/trunk/Social-Data.xml#Person ):
	 - address : YES
	 - emails : ?
	 - name : NO   

-->
 
<![CDATA[
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js"></script>
<script type="text/javascript" src="http://open-app.googlecode.com/files/openapp.js"></script>
<script type="text/javascript" src="http://shindig2.epfl.ch/gadget/libs/rating/jquery.rating.pack.js"></script>


<style type="text/css">
/*start imported css*/
* {margin:0; padding:0;}

html {
	font: 90%/1.3 arial,sans-serif;
	padding:1em;
}
form {
	padding:1em;
	#border:1px solid #eee;
	#margin:1em;
}

fieldset div {
	margin:0.3em 0;
	#clear:both;
}

label {
	float:left;
	width:10em;
	text-align:right;
	margin-right:1em;
}
legend {
	color:#0b77b7;
	font-size:1.2em;
}
legend span {
	width:10em;
	text-align:right;
}
input{
	padding:0.15em;
	#width:10em;
	border:1px solid #ddd;
	font:bold 0.95em arial, sans-serif;
	-moz-border-radius:0.4em;
	-khtml-border-radius:0.4em;
}
input:hover, input:focus {
	border-color:#c5c5c5;
	background:#f6f6f6;
} 
fieldset {
	border:1px solid #ddd;
	padding:0 0.5em 0.5em;
}

#add_skill{
	clear:both;
	float:left
}

.date fieldset label {
	float:none;
	display:block;
	text-align:left;
	width:auto;
}
.date fieldset div {
	float:left;
	clear:none;
	margin-right:0.2em;
}
.radio, .date {
	position:relative;
}
.radio fieldset, .date fieldset {
	border:none;
	width:auto;
	padding:1px 0 0 11em;
}
.radio legend, .date legend {
	font-size:1em;
	color:#000;
}
.radio legend span, .date legend span {
	position:absolute;
	left:0;
	top:0.3em;
	width:10em;
	display:block;
}
.radio label, .radio input {
	vertical-align:middle;
	display:inline;
	float:none;
	width:auto;
	background:none;
	border:none;
}
.radio div {
	float:left;
	white-space:nowrap;
	clear:none;
}

.email {
	width:14em;
}

input.default {
	color:#bbb;
}

input.button{
	margin-top:0.5em;
}


/*end imported css*/
table{
    border-spacing: 5px;
    width: 100%;
    vertical-align: top;
    text-align:center;
    margin-top: 0;
   # table-layout: fixed;
   font-size:0.9em;
  }
  

  
  li{
    display: inline;
    border: 2px solid gray;
    padding: 3px 10px;
    background-color: #e8e8e8;
    cursor: pointer;
    font-size: 12;
    position: relative;
    #right: 38;
    bottom:1em;

  }
  
  img{
    cursor: pointer;
  }
  
</style>

<ul>
  <li id = "contact_tab" onclick = "show_contact()">Contact</li>
  <li id = "academics_tab" onclick = "show_academics()">Academics</li>
  <li id = "experience_tab" onclick = "show_experience()">Experience</li>
 <!-- *!!! CHANGE !!!* --> <li id = "skills_tab" onclick = "show_skills_people()">Skills</li>
  <input type="button" id = "save_to_pdf" onclick = "save_to_pdf()" value="Export to PDF" style="display: inline; padding: 3px 10px;  position: relative; bottom:1em;"></input>
  
</ul>

<!-- ###  CONTACT TAB ### -->
<div id = "contact">
	<fieldset class="contact">
		<legend>Your Contact Details</legend>
		<div><label for="firstname">First Name</label> <input type="text" id="firstname" name="firstname"></div>
		<div><label for="lastname">Last Name</label> <input type="text" id="lastname" name="lastname"></div>
		<div>
			<label for="email">Email</label> <input type="text" id="email" name="email">
		</div>
		<div>
			<label for="adress">Personal address</label> <input type="text" id="address" name="address">
		</div>
		<div>
			<label for="city">City</label> <input type="text" id="city" name="city">
		</div>
		<div>
			<label for="country">Country</label> <input type="text" id="country" name="country">
		</div>
			<input class="button" type="button" value ="Save/Update contact info" id = "update_contact" onclick = "update_contact()"></input>
	</fieldset>	
</div>

<!-- ###  ACADEMICS TAB ### -->
<div id = "academics">
  <fieldset>
		<legend>Add a new diploma</legend>
		<!--<div><label>Start date*</label> <input type="text" id="new_diploma_start" name="new_diploma_start"></div>
			<div><label>End date</label> <input type="text" id="new_diploma_end" name="new_diploma_end"></div>-->
		
		<div class="date">
			<fieldset><legend><span>Start date</span></legend>
				<div>
					<label for="day">Day</label>
					<select id="new_diploma_start_day">
						<option value="01">1</option><option value="02">2</option><option value="03">3</option><option value="04">4</option><option value="05">5</option><option value="06">6</option><option value="07">7</option><option value="08">8</option><option value="09">9</option><option value="10">10</option><option value="11">11</option><option value="12">12</option><option value="13">13</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option><option value="25">25</option><option value="26">26</option><option value="27">27</option><option value="28">28</option><option value="29">29</option><option value="30">30</option><option value="31">31</option>
					</select>
				</div>
				<div>
					<label for="month">Month</label>
					<select id="new_diploma_start_month">
						<option value="01">January</option><option value="02">February</option><option value="03">March</option><option value="04">April</option><option value="05">May</option><option value="06">June</option><option value="07">July</option><option value="08">August</option><option value="09">September</option><option value="10">October</option><option value="11">November</option><option value="12">December</option>
					</select>
				</div>
				<div>
					<label for="year">Year</label>
					<select id="new_diploma_start_year">
						<option value="2012">2012</option><option value="2011">2011</option><option value="2010">2010</option><option value="2009">2009</option><option value="2008">2008</option><option value="2007">2007</option><option value="2006">2006</option><option value="2005">2005</option><option value="2004">2004</option><option value="2003">2003</option><option value="2002">2002</option><option value="2001">2001</option><option value="2000">2000</option><option value="1999">1999</option><option value="1998">1998</option><option value="1997">1997</option><option value="1996">1996</option><option value="1995">1995</option><option value="1994">1994</option><option value="1993">1993</option><option value="1992">1992</option><option value="1991">1991</option><option value="1990">1990</option><option value="1989">1989</option><option value="1988">1988</option><option value="1987">1987</option><option value="1986">1986</option><option value="1985">1985</option><option value="1984">1984</option><option value="1983">1983</option><option value="1982">1982</option><option value="1981">1981</option><option value="1980">1980</option><option value="1979">1979</option><option value="1978">1978</option><option value="1977">1977</option><option value="1976">1976</option><option value="1975">1975</option><option value="1974">1974</option><option value="1973">1973</option><option value="1972">1972</option><option value="1971">1971</option><option value="1970">1970</option>
					</select>
				</div>
			</fieldset>
		</div>			
		<div class="date">
			<fieldset><legend><span>End date</span></legend>
				<div>
					<label for="day">Day</label>
					<select id="new_diploma_end_day">
						<option value="01">1</option><option value="02">2</option><option value="03">3</option><option value="04">4</option><option value="05">5</option><option value="06">6</option><option value="07">7</option><option value="08">8</option><option value="09">9</option><option value="10">10</option><option value="11">11</option><option value="12">12</option><option value="13">13</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option><option value="25">25</option><option value="26">26</option><option value="27">27</option><option value="28">28</option><option value="29">29</option><option value="30">30</option><option value="31">31</option>
					</select>
				</div>
				<div>
					<label for="month">Month</label>
					<select id="new_diploma_end_month">
						<option value="01">January</option><option value="02">February</option><option value="03">March</option><option value="04">April</option><option value="05">May</option><option value="06">June</option><option value="07">July</option><option value="08">August</option><option value="09">September</option><option value="10">October</option><option value="11">November</option><option value="12">December</option>
					</select>
				</div>
				<div>
					<label for="year">Year</label>
					<select id="new_diploma_end_year">
						<option value="2012">2012</option><option value="2011">2011</option><option value="2010">2010</option><option value="2009">2009</option><option value="2008">2008</option><option value="2007">2007</option><option value="2006">2006</option><option value="2005">2005</option><option value="2004">2004</option><option value="2003">2003</option><option value="2002">2002</option><option value="2001">2001</option><option value="2000">2000</option><option value="1999">1999</option><option value="1998">1998</option><option value="1997">1997</option><option value="1996">1996</option><option value="1995">1995</option><option value="1994">1994</option><option value="1993">1993</option><option value="1992">1992</option><option value="1991">1991</option><option value="1990">1990</option><option value="1989">1989</option><option value="1988">1988</option><option value="1987">1987</option><option value="1986">1986</option><option value="1985">1985</option><option value="1984">1984</option><option value="1983">1983</option><option value="1982">1982</option><option value="1981">1981</option><option value="1980">1980</option><option value="1979">1979</option><option value="1978">1978</option><option value="1977">1977</option><option value="1976">1976</option><option value="1975">1975</option><option value="1974">1974</option><option value="1973">1973</option><option value="1972">1972</option><option value="1971">1971</option><option value="1970">1970</option>
					</select>
				</div>
			</fieldset>
		</div>
		
		<div><label>Main topics/skills</label> <textarea rows="2" id="new_diploma_topic" name="new_diploma_topic"></textarea></div>
		<div><label>Institution</label> <input type="text" id="new_diploma_institution" name="new_diploma_institution"></div>
		<input type="button" value ="Add new diploma" id = "add_diploma" onclick = "add_item(academics_fields,'diplomas',show_academics)"></input>
	</fieldset>
	<fieldset>
		<legend>Your diplomas</legend>
		<table id = "table_diploma" rules = "rows" frame = "hsides">
		</table>
	</fieldset>
</div>

<!-- ###  EXPERIENCE TAB ### -->
<div id = "experience">
  <fieldset>
		<legend>Add a new experience</legend>
		<!--<div><label>Start date*</label> <input type="text" id="new_expe_start" name="new_expe_start"></div>
			<div><label>End date</label> <input type="text" id="new_expe_end" name="new_expe_end"></div>
		-->
		<div class="date">
			<fieldset><legend><span>Start date</span></legend>
				<div>
					<label for="day">Day</label>
					<select id="new_expe_start_day">
						<option value="01">01</option><option value="02">2</option><option value="03">3</option><option value="04">4</option><option value="05">5</option><option value="06">6</option><option value="07">7</option><option value="08">8</option><option value="09">9</option><option value="10">10</option><option value="11">11</option><option value="12">12</option><option value="13">13</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option><option value="25">25</option><option value="26">26</option><option value="27">27</option><option value="28">28</option><option value="29">29</option><option value="30">30</option><option value="31">31</option>
					</select>
				</div>
				<div>
					<label for="month">Month</label>
					<select id="new_expe_start_month">
						<option value="01">January</option><option value="02">February</option><option value="03">March</option><option value="04">April</option><option value="05">May</option><option value="06">June</option><option value="07">July</option><option value="08">August</option><option value="09">September</option><option value="10">October</option><option value="11">November</option><option value="12">December</option>
					</select>
				</div>
				<div>
					<label for="year">Year</label>
					<select id="new_expe_start_year">
						<option value="2012">2012</option><option value="2011">2011</option><option value="2010">2010</option><option value="2009">2009</option><option value="2008">2008</option><option value="2007">2007</option><option value="2006">2006</option><option value="2005">2005</option><option value="2004">2004</option><option value="2003">2003</option><option value="2002">2002</option><option value="2001">2001</option><option value="2000">2000</option><option value="1999">1999</option><option value="1998">1998</option><option value="1997">1997</option><option value="1996">1996</option><option value="1995">1995</option><option value="1994">1994</option><option value="1993">1993</option><option value="1992">1992</option><option value="1991">1991</option><option value="1990">1990</option><option value="1989">1989</option><option value="1988">1988</option><option value="1987">1987</option><option value="1986">1986</option><option value="1985">1985</option><option value="1984">1984</option><option value="1983">1983</option><option value="1982">1982</option><option value="1981">1981</option><option value="1980">1980</option><option value="1979">1979</option><option value="1978">1978</option><option value="1977">1977</option><option value="1976">1976</option><option value="1975">1975</option><option value="1974">1974</option><option value="1973">1973</option><option value="1972">1972</option><option value="1971">1971</option><option value="1970">1970</option>
					</select>
				</div>
			</fieldset>
		</div>			
		<div class="date">
			<fieldset><legend><span>End date</span></legend>
				<div>
					<label for="day">Day</label>
					<select id="new_expe_end_day">
						<option value="01">1</option><option value="02">2</option><option value="03">3</option><option value="04">4</option><option value="05">5</option><option value="06">6</option><option value="07">7</option><option value="08">8</option><option value="09">9</option><option value="10">10</option><option value="11">11</option><option value="12">12</option><option value="13">13</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option><option value="25">25</option><option value="26">26</option><option value="27">27</option><option value="28">28</option><option value="29">29</option><option value="30">30</option><option value="31">31</option>
					</select>
				</div>
				<div>
					<label for="month">Month</label>
					<select id="new_expe_end_month">
						<option value="01">January</option><option value="02">February</option><option value="03">March</option><option value="04">April</option><option value="05">May</option><option value="06">June</option><option value="07">July</option><option value="08">August</option><option value="09">September</option><option value="10">October</option><option value="11">November</option><option value="12">December</option>
					</select>
				</div>
				<div>
					<label for="year">Year</label>
					<select id="new_expe_end_year">
						<option value="2012">2012</option><option value="2011">2011</option><option value="2010">2010</option><option value="2009">2009</option><option value="2008">2008</option><option value="2007">2007</option><option value="2006">2006</option><option value="2005">2005</option><option value="2004">2004</option><option value="2003">2003</option><option value="2002">2002</option><option value="2001">2001</option><option value="2000">2000</option><option value="1999">1999</option><option value="1998">1998</option><option value="1997">1997</option><option value="1996">1996</option><option value="1995">1995</option><option value="1994">1994</option><option value="1993">1993</option><option value="1992">1992</option><option value="1991">1991</option><option value="1990">1990</option><option value="1989">1989</option><option value="1988">1988</option><option value="1987">1987</option><option value="1986">1986</option><option value="1985">1985</option><option value="1984">1984</option><option value="1983">1983</option><option value="1982">1982</option><option value="1981">1981</option><option value="1980">1980</option><option value="1979">1979</option><option value="1978">1978</option><option value="1977">1977</option><option value="1976">1976</option><option value="1975">1975</option><option value="1974">1974</option><option value="1973">1973</option><option value="1972">1972</option><option value="1971">1971</option><option value="1970">1970</option>
					</select>
				</div>
			</fieldset>
		</div>
		
		
		
		<div><label>Main activities</label> <textarea rows="2" id="new_expe_activity" name="new_expe_activity"></textarea></div>
		<div><label>Employer</label> <input type="text" id="new_expe_employer" name="new_expe_employer"></div>
		<input type="button" value ="Add new Experience" id = "add_expe" onclick = "add_item(expe_fields,'experience', show_experience)"></input>
	</fieldset>
	<fieldset>
		<legend>Your Experiences</legend>
		<table id = "table-expe" rules = "rows" frame = "hsides">
		</table>
	</fieldset>
</div>

<!-- ###  SKILLS TAB ### -->
<div id = "skills">
  <fieldset>
		<legend>Add a new skill</legend>
		<div><label>Topic</label> <input type="text" id="new_skill_topic" name="new_skill_topic"></div>
		<div style="display:none"><label>Level</label> <input type="text" id="new_skill_level" name="new_skill_level"></div>
		<div  id="rating" style="display:block">
			<label>Level</label>
			<input name="auto_star" type="radio" class="auto-submit-star" value="1"/>
			<input name="auto_star" type="radio" class="auto-submit-star" value="2"/>
			<input name="auto_star" type="radio" class="auto-submit-star" value="3"/>
			<input name="auto_star" type="radio" class="auto-submit-star" value="4"/>
			<input name="auto_star" type="radio" class="auto-submit-star" value="5"/>
			<input name="auto_star" type="radio" class="auto-submit-star" value="6"/>
			<input name="auto_star" type="radio" class="auto-submit-star" value="7"/>
			<input name="auto_star" type="radio" class="auto-submit-star" value="8"/>				
		</div>	
 <!-- *!!! CHANGE !!!* --><!-- <input type="button" value ="Add new skill" id = "add_skill" onclick = "add_item(skills_fields,'skills',show_skills)"></input>-->
		<input type="button" value ="Add new skill" id = "add_skill" onclick = "add_competence()"></input>
		
	</fieldset>
	<fieldset>
		<legend>Your skills and competences</legend>
		<table id = "table-skills" rules = "rows" frame = "hsides">
		</table>
	</fieldset>
</div>

<ul>
	 <input type="button" id = "reset" onclick = "reset()" value="Reset ALL data" style="display: inline; padding: 3px 10px;  position: relative; bottom:1em; top:1em"></input>
</ul>


<script type="text/javascript">
//************************************* 
//#####  global variables ######
//************************************* 
 
  var counter = 0;
  // set the "contact" tab to default one
  var current_tab = "contact_tab";
  var current = "contact";
  var userIsOwner = false;
  $("#academics").hide();
  $("#experience").hide();
  $("#skills").hide();
  changeCurrentTab(current_tab, current_tab);
  changeCurrent(current, current);
  //gadgets.util.registerOnLoadHandler(show_contact);// careful: doesn't work in moodle :>> use setTiumeOUt instead to be sure that everything is loaded before calliong
  // data object to store data
  var app = {context: "", viewerName: "",viewerId:"", data: ""};
  
  // fields ID array for adding new item
  var expe_fields = {"new_expe_start_day":"test","new_expe_start_month":"test","new_expe_start_year":"test", "new_expe_end_day":"test", "new_expe_end_month":"test", "new_expe_end_year":"test","new_expe_activity":"test", "new_expe_employer":"test"};
  var academics_fields ={"new_diploma_start_day":"", "new_diploma_start_month":"","new_diploma_start_year":"","new_diploma_end_day":"","new_diploma_end_month":"", "new_diploma_end_year":"","new_diploma_topic":"", "new_diploma_institution":""};
  var skills_fields ={"new_skill_topic":"", "new_skill_level":""};

	// Skill rating : load stylesheets (hacky, problem in shindig in css with background:url(image.png))
	var scriptElem = document.createElement('link');
	scriptElem.setAttribute('href', "http://shindig2.epfl.ch/gadget/libs/rating/jquery.rating.css");
	scriptElem.setAttribute('rel', "stylesheet");
	scriptElem.setAttribute('type', "text/css");
	document.body.appendChild(scriptElem); 
	var skillLevel = 0;
  
//************************************* 
//#####  initialization function ######
//************************************* 
var initialize = function() {

 	 // add rating "watcher"
	$('.auto-submit-star').rating({
	  callback: function(value, link){
	    skillLevel = value;
	    console.log("skill Level="+skillLevel);
	    document.getElementById('new_skill_level').value=value;
	  }
	}); 
	//remove default cancel rating sign
	$('.rating-cancel').remove();
	
    // batch: get viewer and context for gadget
    var batch = osapi.newBatch();
    batch.add('viewer', osapi.people.getViewer());
    if (osapi.context) { // only for spaces extended container
      batch.add('context', osapi.context.get());
    } else {
      batch.add('context', osapi.people.getOwner());    
    }
    batch.add('owner', osapi.people.getOwner()); 
    batch.execute(function(data){
    
		app.viewer = data.viewer;
		app.viewerName = app.viewer.displayName;
		
		var contextId = "@owner"
		var contextType = "@user"
	//checking if owner is the same as viewer	
		console.log("Owner ="+JSON.stringify(data.owner));
		console.log("Viewer ="+JSON.stringify(data.viewer));
		
		if (data.owner.id == data.viewer.id){		 	
		 	userIsOwner = true;
		 	console.log("owner is the same as viewer, var="+userIsOwner);
		 }
		 else{
		 	console.log("owner is NOT the same as viewer");
		 	userIsOwner = false;
		 }
		    
    
     
	
        
      if (osapi.context) { // only for spaces extended container
        contextId = data.context.contextId
        contextType = data.context.contextType      
      }
      var prefix = (contextType === "@space") ? "s_" : "";
      app.context = prefix + contextId;

	 //show contact tab at start
    show_contact();
    });
   
  };
  
//************************************* 
//### fction to display "contact" #####
//************************************* 
  function show_contact(){
   // display contact tab   
    changeCurrentTab(current_tab, "contact_tab");
    changeCurrent(current, "contact");
    
  // A. Personal User's data method:
  //load users data and pre-fill input when possible
	/*osapi.people.getViewer().execute(function(viewer){  
	  	// First name and last Name(when available)
	  	if (viewer.name){
	  		document.getElementById('firstname').value="viewer.name.givenName";
	  		document.getEl ementById('lastname').value="viewer.name.familyName";
	  	}
	  	else{
	  	// First name replace by display name if 'name' field is empty
	  		document.getElementById('firstname').value=viewer.displayName;
	  	}  
	  	// email 	  		  	
	  	if(viewer.emails){
	  		document.getElementById('email').value=viewer.emails[0];	
		}	  	
	});*/
	
	//TEST
	console.log("viewer id:"+app.viewer.id);
	
	//B. AppData method (current)	
	osapi.appdata.get({userId: app.viewer.id}).execute(function(data){
		if (data.error) 
		    	{ alert("Error " + data.error.code + " retrieving application data: " + data.error.message); } 
		else {			
			console.log(JSON.stringify(data));			
	    	var contact = data[app.viewer.id];
	    	contact = JSON.parse(contact["contact"]);
	    	console.log(JSON.stringify(contact)); 	   
	    
			if (contact.firstName){
		  		document.getElementById('firstname').value=decodeURIComponent(contact.firstName);
		  	}
		  	if (contact.lastName){
		  		document.getElementById('lastname').value=decodeURIComponent(contact.lastName);
		  	}
		  	// email 	  		  	
		  	if(contact.email){
		  		document.getElementById('email').value=decodeURIComponent(contact.email);	
			}
			if(contact.address){
		  		document.getElementById('address').value=decodeURIComponent(contact.address);	
			}
			if(contact.city){
		  		document.getElementById('city').value=decodeURIComponent(contact.city);	
			}
			if(contact.country){
		  		document.getElementById('country').value = decodeURIComponent(contact.country);	
			}
		}	
	});
	
  }

//************************************* 
//### Fction to update contact info ###
//************************************* 
function update_contact(){
	
	// checking that current user is the owner of the space 
	if (!userIsOwner){
		alert("To update the contact info, you have to be the owner of *this installation* of the widget");
		return 1;
	}
	
	//creat contact-related data object
	var contactData = {
			"firstName":encodeURIComponent(document.getElementById('firstname').value),
			"lastName":encodeURIComponent(document.getElementById('lastname').value),
			"email":encodeURIComponent(document.getElementById('email').value),
			"address":encodeURIComponent(document.getElementById('address').value),
			"city":encodeURIComponent(document.getElementById('city').value),
			"country":encodeURIComponent(document.getElementById('country').value)
			};

	//update appdata object
	osapi.appdata.update({userId: app.viewerId, 
	    data: {"contact": JSON.stringify(contactData)}}).execute(function(response) {		    
		    if (response.error) 
		    	{ alert("Error " + response.error.code + " retrieving application data: " + response.error.message); } 
		    else {
		    	console.log(JSON.stringify(response)); 
		    	console.log("Contact data updated in APPDATA");	    	
		     }		    
	  	});	   
	  	
	 // ## update people data ##
	 //create name temp-object:
	 
        
     //create emails temp. object:
     var email_CV = {
                "primary":false,
                "value":encodeURIComponent(document.getElementById('email').value),
                "type":"CVData"
            };
     //create CV related address object
     var address_CV =   {
                "streetAddress":encodeURIComponent(document.getElementById('address').value),
                "country":encodeURIComponent(document.getElementById('country').value),
                "locality":encodeURIComponent(document.getElementById('city').value),
                "type":"CVData"
            }; 
     
     //get adress, emails, and name objects from people data
     // the rule: IF there is already >=1 address object 
     //				check FOR EACH if it has a type key equal to CVData => isCVData = 1; CVDataIndex = i
     //				IF isCVData == 1
     //					udpate address[CVDataIndex]
     //				ELSE
     //					add the current CVData address/email object
     //					
     //			ELSE
     //				add the current CVData address/email object
     
      osapi.people.get({userId: "@owner"}).execute(function(data){
	 	console.log("Updating CONTACT INFO in PEOPLE data");
	 	console.log("emails: "+JSON.stringify(email_CV));
	 	console.log("name: "+JSON.stringify(address_CV));
	 	console.log("data object retrieved "+JSON.stringify(data));
	 	// parsing already existing data
     	if (data["name"]){     		
     		console.log("parsing contact info : "+data["name"]);
   			var new_name_object = data["name"];
   			new_name_object.familyName = encodeURIComponent(document.getElementById('lastname').value);
   			new_name_object.givenName = encodeURIComponent(document.getElementById('firstname').value);
   			console.log("updated already existing name object");
     	}
     	else{     		  	
     		var new_name_object = {
            	"familyName":encodeURIComponent(document.getElementById('lastname').value),
            	"givenName":encodeURIComponent(document.getElementById('firstname').value)
        	};
     		console.log("adding new name object");
     	}     
     	console.log("parsing name done");
     		// add collected competences to data object
      		//competences.push(competence_tmp);
     		//console.log("\nNEW comp. data = "+JSON.stringify(competences));
      	
      	// save data to the array of entries
     	osapi.people.update(
     		{userId: "@owner", 
      		person: {"name": new_name_object}
      		}).execute(function(response){
      			if (response.error){
      				alert("Error " + response.error.code + " retrieving people for contact data: " + response.error.message); 
      			} 
		   		else {
		    		console.log("Contact updated : "+JSON.stringify(response));
		    		//reload display to see new comp. 		    
					show_contact();
		     	}	      		
      		});
	});
}
//************************************* 
//## fction to display "Academics"   
//************************************* 
function show_academics(){
  changeCurrentTab(current_tab, "academics_tab");
  changeCurrent(current, "academics");    
  
 
  //Erasing the old view of the table
    $("#table_diploma").replaceWith("<table id = 'table_diploma' rules='rows' frame='hsides'><tr><th id ='start' style='width:15%'>Start</th><th id='End' style='width:15%'>End</th><th id = 'topic'style='width:35%'>Main Topic/Skill</th><th id='institution' style='width:25%'>Institution</th><th style='width:10%'></th></tr></table>");
    
    // get appdata
    osapi.appdata.get({userId: app.viewer.id}).execute(function(data){
		data = data[app.viewer.id];
		if (data["diplomas"]) {
			data = JSON.parse(data["diplomas"]);
			var item="";
			console.log("diploma table length="+data.length);
			for(i=data.length-1; i>=0; i--)
			{ //var academics_fields ={"new_diploma_start_day":"", "new_diploma_start_month":"","new_diploma_start_year":"","new_diploma_end_day":"","new_diploma_end_month":"", "new_diploma_end_year":"","new_diploma_topic":"", "new_diploma_institution":""};

				console.log(item);	
				item="<tr><td>" + data[i].new_diploma_start_month+"/"+data[i].new_diploma_start_year+
					"</td><td>" + data[i].new_diploma_end_month+"/"+ data[i].new_diploma_end_year+ 
					"</td><td>" + escapeSpecial(decodeURIComponent(data[i].new_diploma_topic)) + 
					"</td><td>"+ escapeSpecial(decodeURIComponent(data[i].new_diploma_institution))+
					"</td><td><input type='button' value='-' onclick='remove_item(\"diplomas\", "+i+",show_academics)'></input></td></tr>";			
			    console.log(item);
			    $("#table_diploma").append(item);
			}						  
		};		
    });  
}

//************************************* 
//## fction to display "Experience"  
//************************************* 
function show_experience(){
	changeCurrentTab(current_tab, "experience_tab");
	changeCurrent(current, "experience");    

	//Erasing the old view of the table
    $("#table-expe").replaceWith("<table id = 'table-expe' rules='rows' frame='hsides'><tr><th id ='start_expe' style='width:15%'>Start</th><th id='end_expe' style='width:15%'>End</th><th id='activity_expe' style='width:35%'>Description</th><th id='employer' style='width:25%'>Employer</th><th style='width:10%'></th></tr></table>");
    
    // get appdata
    osapi.appdata.get({userId: app.viewer.id}).execute(function(data){
		data = data[app.viewer.id];
		if (data["experience"]) {
			data = JSON.parse(data["experience"]);
			var item="";
			console.log("experience table length="+data.length);
			for(i=data.length-1; i>=0; i--)
			{//var expe_fields = {"new_expe_start_day":"test","new_expe_start_month":"test","new_expe_start_year":"test", "new_expe_end_day":"test", "new_expe_end_month":"test", "new_expe_end_year":"test","new_expe_activity":"test", "new_expe_employer":"test"};
				console.log(item);	
				item="<tr><td>" + data[i].new_expe_start_month+"/"+data[i].new_expe_start_year+
					"</td><td>" + data[i].new_expe_end_month+"/"+data[i].new_expe_end_year + 
					"</td><td>" + escapeSpecial(decodeURIComponent(data[i].new_expe_activity ))+ 
					"</td><td>"+ escapeSpecial(decodeURIComponent(data[i].new_expe_employer))+
					"</td><td><input type='button' value='-' onclick='remove_item(\"experience\", "+i+",show_experience)'></input></td></tr>";			
			    console.log(item);
			    $("#table-expe").append(item);
			}						  
		};		
    });      
    
}
//*************************************  
 //## fction to display "Skills" 
 //************************************* 
function show_skills(){
	changeCurrentTab(current_tab, "skills_tab");
	changeCurrent(current, "skills");    
 
	//Erasing the old view of the table
	$("#table-skills").replaceWith("<table id='table-skills' rules='rows' frame='hsides'><tr><th id='skill_topic' style='width=45%'>Topic</th><th id='skill_level' style='width=45%'>Level</th><th style='width=10%'></th></tr></table>");
	 
	// get appdata
	osapi.appdata.get({userId: app.viewer.id}).execute(function(data){
		data = data[app.viewer.id];
		if (data["skills"]) {
			data = JSON.parse(data["skills"]);
			var item="";
			console.log("skills table length="+data.length);
			for(i=data.length-1; i>=0; i--)
			{					
				item="<tr><td>" + escapeSpecial(decodeURIComponent(data[i].new_skill_topic))+
					"</td><td>" + data[i].new_skill_level + "/8"+					
					"</td><td><input type='button' value='-' onclick='remove_item(\"skills\", "+i+",show_skills)'></input></td></tr>";			
			    console.log(item);
			    $("#table-skills").append(item);
			}						  
		};		
	});    
	
	// get competences from "people" data
	
}
//*************************************  
 //## fction to display "Skills" FROM PEOPLE DATA
 //************************************* 
function show_skills_people(){
	changeCurrentTab(current_tab, "skills_tab");
	changeCurrent(current, "skills");    
 	console.log ("within show_skills_people");
	//Erasing the old view of the table
	$("#table-skills").replaceWith("<table id='table-skills' rules='rows' frame='hsides'><tr><th id='skill_topic' style='width=45%'>Topic</th><th id='skill_level' style='width=45%'>Level</th><th style='width=10%'></th></tr></table>");
	 
	// get people data
	osapi.people.get({userId: "@owner"}).execute(function(data){
		console.log("parsing user data = "+JSON.stringify(data));
		if (data["competences"]) {
			competence_data = data["competences"];
			var item="";
			console.log("skills table length="+competence_data.length);
			for(i=competence_data.length-1; i>=0; i--) 	<!-- model "competences":[{"topic":"java","value":"0"},{"topic":"ruby","value":"3"}],  -->
			{					
				item="<tr><td>" + escapeSpecial(decodeURIComponent(competence_data[i].topic))+
					"</td><td>" + competence_data[i].value + "/8"+					
					"</td><td><input type='button' value='-' onclick='remove_competence(i)'></input></td></tr>";			
			    console.log(item);
			    $("#table-skills").append(item);
			}						  
		};		
	});    

}
//*************************************  
 //## fction to save "Skills" in people data  
 //************************************* 
function add_competence(){
	// checking that current user is the owner of the space 
	if (!userIsOwner){
		alert("You have to run the widget in a space where you have writing rights!");
		return 1;
	}
	//create competence tmp object
//!! Should escape XML forbidden char.
	competence_tmp = {
		"topic":encodeURIComponent(document.getElementById('new_skill_topic').value),
		"value":encodeURIComponent(document.getElementById('new_skill_level').value),
		};
	// add new competence and update people data
	
	 osapi.people.get({userId: "@owner"}).execute(function(data){
	 	console.log("ADDING NEW COMPETENCE");
	 	console.log("competence_tmp: "+JSON.stringify(competence_tmp));
	 	console.log("data object retrieved "+JSON.stringify(data));
	 	// parsing already existing competences create new competence data
     	if (data["competences"]){     		
     		console.log("parsing competences"+data["competences"]);
   			var competences = data["competences"];
   			console.log("parsed competences");
     	}
     	else{     		  	
     		var competences=[];
     		console.log("empty competence data");
     	}     
     	console.log("\nOLD comp. data = "+JSON.stringify(competences));
     	// add collected competences to data object
      	competences.push(competence_tmp);
     	console.log("\nNEW comp. data = "+JSON.stringify(competences));
      	
      	// save data to the array of entries
     	osapi.people.update(
     		{userId: "@owner", 
      		person: {"competences": competences}
      		}).execute(function(response){
      			if (response.error){
      				alert("Error " + response.error.code + " retrieving people (for competence) data: " + response.error.message); 
      			} 
		   		else {
		    		console.log("NEW COMPETENCE ADDED : "+JSON.stringify(response));
		    		//reload display to see new comp. 		    
					show_skills_people();
		     	}	      		
      		});
	});
}
//*************************************  
//##functions to remove COMPETENCE from PEOPLE DATA
//************************************* 
function remove_competence(index){

	console.log("removing competence at position "+index+"");
	
	osapi.people.get({userId: "@owner"}).execute(function(data){
	 	console.log("REMOVING COMPETENCE");
	 	console.log("data object retrieved "+JSON.stringify(data));
     	
   		if (data["competences"]){
   			var competence_object=data["competences"];
   			console.log("parsed object: "+JSON.stringify(competence_object));
   			competence_object.splice(index,1); //remove 1 object at position "index"  
   			console.log("parsed competence_object after removal: "+JSON.stringify(competence_object));
   			// update
	     	osapi.people.update(
	     		{userId: "@owner", 
	      		person: {"competences": competence_object}
	      		}).execute(function(response){
	      			if (response.error){
	      				alert("Error " + response.error.code + " retrieving people (for competence) data: " + response.error.message); 
	      			} 
			   		else {
			    		console.log("COMPETENCE UPDATED Successfully : "+JSON.stringify(response));
			    		//reload display to see new comp. 		    
						show_skills_people();
			     	}	      		
	      		});    			
     		}
     	      	
	});
}
//*************************************  
 //## fction to add new ITEM (GENERIC)
 //************************************* 
function add_item(fields, appdata_key, calling_func){
	//Collect data and create tmp data object	
	for (var key in fields){		
		fields[key] = encodeURIComponent(document.getElementById(key).value);		
	};	
			
	// add new expe and update appdata	
	 osapi.appdata.get({userId: app.viewer.id}).execute(function(data){
	 	console.log("ADDING NEW ITEM");
	 	console.log("data object retrieved "+JSON.stringify(data));
	 	var data_object = [];
     	if (data[app.viewer.id]){
     		if(data[app.viewer.id][appdata_key]){
     			data_object=JSON.parse(data[app.viewer.id][appdata_key]);
     			console.log("parsed data with key "+appdata_key);
     		}else{
     			var data_object=[];
     			console.log("empty data");
     		}
     	}
		// add collected data to current appdata
      	data_object.push(fields);
      	// Prepare request's parameters: hack passing through a string parsed afterwards to be able 
      	// to change the field updated in appdata object 
      	var data_object_string = JSON.stringify(data_object);
     	data_object_string = data_object_string.replace(/\"/g,"\\\""); // double escape of "
     	var param_object_string="{\"userId\":\""+app.viewer.id+"\", \"data\": {\""+appdata_key+"\": \""+data_object_string+"\"}}";
		console.log(param_object_string);
		var param_object = JSON.parse(param_object_string);
		console.log(JSON.stringify(param_object));   
		//submit request 
      	osapi.appdata.update(param_object).execute(function(response){
 			if (response.error){
    			alert("Error " + response.error.code + " when *adding* item  " + response.error.message); 
    		} 
   			else {
    			console.log("ITEM ADDITION Success "+JSON.stringify(response)); 		    
    			calling_func(); // go back to where we come from
     		}	      		
    	});   

	});
	
}
//*************************************  
//##functions to remove item and update
//************************************* 
function remove_item(appdata_key, index, calling_func){

	console.log("removing item "+index+" from object: "+appdata_key);
	
	osapi.appdata.get({userId: app.viewer.id}).execute(function(data){
	 	console.log("REMOVING ITEM");
	 	console.log("data object retrieved "+JSON.stringify(data));
     	if (data[app.viewer.id]){
     		if (data[app.viewer.id][appdata_key]){
     			var data_object=JSON.parse(data[app.viewer.id][appdata_key]);
     			console.log("parsed object: "+JSON.stringify(data_object));
     			data_object.splice(index,1); //remove 1 object at position "index"  
     			console.log("parsed object after removal: "+JSON.stringify(data_object));
     			// update
     			var data_object_string = JSON.stringify(data_object);
     			data_object_string = data_object_string.replace(/\"/g,"\\\"");
     			var param_object_string="{\"userId\":\""+app.viewer.id+"\", \"data\": {\""+appdata_key+"\": \""+data_object_string+"\"}}";
		      	console.log(param_object_string);
		      	var param_object = JSON.parse(param_object_string);
		      	console.log(JSON.stringify(param_object));
		     	osapi.appdata.update(param_object).execute(function(response){
		      			if (response.error){
		      				alert("Error " + response.error.code + " when *removing* item  " + response.error.message); 
		      			} 
				   		else {
				    		console.log("ITEM REMOVAL Success "+JSON.stringify(response)); 		    
				    		calling_func();
				     	}	      		
		      		});     			
     		}
     	}      	
	});
}
//*************************************  
 //## fction to reset all appdata (ie/not contact nor competences)
 //************************************* 
function reset(){   
	alert("WARNING\n This will ERASE all submitted and stored DATA\n (Press Escape key to discard, OK to proceed)");
	osapi.appdata.update({"userId":app.viewer.id, "data": {"contact":"", "experience":"", "skills":"", "diplomas":""}}).execute(function(response){
	if (response.error){
		alert("Error " + response.error.code + " when *RESETTING* item  " + response.error.message); 
	} 
	else {
		console.log("All data erased "+JSON.stringify(response)); 		    
		}	      		
	});  
}
//*************************************  
//##functions to EXPORT in PDF using europass service
// RMK: since the europass WS send the encoded bytes of the response PDF file within the XML response message, we have to use a proxy to
// deal with the data and create a proper file, which cannot be done from within the widget
//************************************* 
function save_to_pdf(){

	console.log("exporting to pdf");
		
	// building JSON object from all fields
  	//json_object={"locale":"en_GB","docInfo":{"issuedate":"19/10/2011","xsdversion":"V2.0","comment":"AutomaticallygeneratedEuropassCV"},"prefs":[{"name":"step1.firstName","before":"step1.lastName"},{"name":"step1.addressInfo","keep":"true"},{"name":"step1.telephone","keep":"false"},{"name":"step1.mobile","keep":"false"},{"name":"step1.fax","keep":"false"},{"name":"step1.email","keep":"true"},{"name":"step1.nationality","keep":"false"},{"name":"step1.birthDate","keep":"false","format":""},{"name":"step1.gender","keep":"false"},{"name":"step1.photo","keep":"false"},{"name":"step1.application.label","keep":"false"},{"name":"step3List","keep":"true","before":"step4List"},{"name":"step3List[1].company.sector.label","keep":"false"},{"name":"step3List[1].company.addressInfo","keep":"false"},{"name":"step3List[1].company.name","keep":"true"},{"name":"step3List[1].activities","keep":"true"},{"name":"step3List[1].position.label","keep":"false"},{"name":"step3List[0].company.sector.label","keep":"false"},{"name":"step3List[0].company.addressInfo","keep":"false"},{"name":"step3List[0].company.name","keep":"true"},{"name":"step3List[0].activities","keep":"true"},{"name":"step3List[0].position.label","keep":"false"},{"name":"step4List","keep":"true"},{"name":"step4List[1].level.label","keep":"false"},{"name":"step4List[1].educationalOrg.addressInfo","keep":"false"},{"name":"step4List[1].educationalOrg.name","keep":"true"},{"name":"step4List[1].skills","keep":"true"},{"name":"step4List[1].title","keep":"false"},{"name":"step4List[0].level.label","keep":"false"},{"name":"step4List[0].educationalOrg.addressInfo","keep":"false"},{"name":"step4List[0].educationalOrg.name","keep":"true"},{"name":"step4List[0].skills","keep":"true"},{"name":"step4List[0].title","keep":"false"},{"name":"step5.motherLanguages","keep":"false"},{"name":"step5.foreignLanguageList","keep":"false"},{"name":"step6.socialSkills","keep":"false"},{"name":"step6.organisationalSkills","keep":"false"},{"name":"step6.technicalSkills","keep":"false"},{"name":"step6.computerSkills","keep":"false"},{"name":"step6.artisticSkills","keep":"false"},{"name":"step6.otherSkills","keep":"true"},{"name":"step6.drivingLicences","keep":"false"},{"name":"step7.additionalInfo","keep":"false"},{"name":"step7.annexes","keep":"false"},{"name":"grid","keep":"false"}],"identification":{"firstname":"","lastname":"","contactinfo":{"address":{"addressLine":[""],"municipality":"","postalCode":"","country":{"code":"","label":""}},"telephone":"","fax":"","mobile":"","email":""},"demographics":{"birthdate":null,"gender":"NA","nationality":[{"code":null,"label":"\t\t\t\t"}]}},"application":{"code":null,"label":""},"workexperiencelist":[{"period":{"from":{"year":"2007","month":"09","day":"01"},"to":{"year":"2010","month":"10","day":"31"}},"position":{"code":null,"label":""},"activities":"FellowresearcherinSemanticWeb","employer":{"name":"INRIA,FRANCE","address":{"addressLine":[""],"municipality":"","postalCode":"","country":{"label":""}},"sector":{"code":null,"label":""}}}],"educationlist":[{"period":{"from":{"year":"2011","month":"01","day":"01"},"to":{"year":"2011","month":"02","day":"01"}},"title":"","skills":"MechanicalEngineering,numericalmodels","organisation":{"name":"UTC,UniversityofTechnologyofCompiegne","address":{"addressLine":[""],"municipality":"","postalCode":"","country":{"label":""}},"type":""},"level":{"code":null,"label":""},"educationalfield":{"code":null,"label":""}}],"languagelist":[{"type":"europass:mother","label":""}],"skilllist":{"skill":[{"type":"social","value":""},{"type":"organisational","value":""},{"type":"technical","value":""},{"type":"computer","value":""},{"type":"artistic","value":""},{"type":"other","value":""}],"structured-skill":[{"type":"europass:driving","drivinglicence":null}]},"misclist":[{"type":"additional","value":""},{"type":"annexes","value":""}]};
	cvdata={"locale":"en_GB","docInfo":{"issuedate":"19/10/2011","xsdversion":"V2.0","comment":"AutomaticallygeneratedEuropassCV"},"prefs":[{"name":"step1.firstName","before":"step1.lastName"},{"name":"step1.addressInfo","keep":"true"},{"name":"step1.telephone","keep":"false"},{"name":"step1.mobile","keep":"false"},{"name":"step1.fax","keep":"false"},{"name":"step1.email","keep":"true"},{"name":"step1.nationality","keep":"false"},{"name":"step1.birthDate","keep":"false","format":""},{"name":"step1.gender","keep":"false"},{"name":"step1.photo","keep":"false"},{"name":"step1.application.label","keep":"false"},{"name":"step3List","keep":"true","before":"step4List"},{"name":"step3List[0].company.sector.label","keep":"false"},{"name":"step3List[0].company.addressInfo","keep":"false"},{"name":"step3List[0].company.name","keep":"true"},{"name":"step3List[0].activities","keep":"true"},{"name":"step3List[0].position.label","keep":"false"},{"name":"step4List","keep":"true"},{"name":"step4List[0].level.label","keep":"false"},{"name":"step4List[0].educationalOrg.addressInfo","keep":"false"},{"name":"step4List[0].educationalOrg.name","keep":"true"},{"name":"step4List[0].skills","keep":"true"},{"name":"step4List[0].title","keep":"false"},{"name":"step5.motherLanguages","keep":"false"},{"name":"step5.foreignLanguageList","keep":"false"},{"name":"step6.socialSkills","keep":"false"},{"name":"step6.organisationalSkills","keep":"false"},{"name":"step6.technicalSkills","keep":"false"},{"name":"step6.computerSkills","keep":"false"},{"name":"step6.artisticSkills","keep":"false"},{"name":"step6.otherSkills","keep":"true"},{"name":"step6.drivingLicences","keep":"false"},{"name":"step7.additionalInfo","keep":"false"},{"name":"step7.annexes","keep":"false"},{"name":"grid","keep":"false"}],"identification":{"firstname":"","lastname":"","contactinfo":{"address":{"addressLine":[""],"municipality":"","postalCode":"","country":{"code":"","label":""}},"telephone":"","fax":"","mobile":"","email":""},"demographics":{"birthdate":null,"gender":"NA","nationality":[{"code":null,"label":"\t\t\t\t"}]}},"application":{"code":null,"label":""},"workexperiencelist":[{"period":{"from":{"year":"2000","month":"01","day":"01"},"to":{"year":"2001","month":"01","day":"01"}},"position":{"code":null,"label":""},"activities":"","employer":{"name":"","address":{"addressLine":[""],"municipality":"","postalCode":"","country":{"label":""}},"sector":{"code":null,"label":""}}}],"educationlist":[{"period":{"from":{"year":"2000","month":"01","day":"01"},"to":{"year":"2001","month":"01","day":"01"}},"title":"","skills":"","organisation":{"name":"","address":{"addressLine":[""],"municipality":"","postalCode":"","country":{"label":""}},"type":""},"level":{"code":null,"label":""},"educationalfield":{"code":null,"label":""}}],"languagelist":[{"type":"europass:mother","label":""}],"skilllist":{"skill":[{"type":"social","value":""},{"type":"organisational","value":""},{"type":"technical","value":""},{"type":"computer","value":""},{"type":"artistic","value":""},{"type":"other","value":""}],"structured-skill":[{"type":"europass:driving","drivinglicence":null}]},"misclist":[{"type":"additional","value":""},{"type":"annexes","value":""}]};
	
	// retrieve data from contact fields	
	cvdata.identification.firstname=decodeURIComponent(document.getElementById('firstname').value);
	cvdata.identification.lastname=decodeURIComponent(document.getElementById('lastname').value);
	cvdata.identification.contactinfo.email=decodeURIComponent(document.getElementById('email').value);
	cvdata.identification.contactinfo.address.addressLine[0]=decodeURIComponent(document.getElementById('address').value);
	cvdata.identification.contactinfo.address.municipality=decodeURIComponent(document.getElementById('city').value);
	cvdata.identification.contactinfo.address.country.label=decodeURIComponent(document.getElementById('country').value);
	
	console.log(JSON.stringify(cvdata));
	
	// Retrieve data from appdata
	//var expe_fields = {"new_expe_start_day":"test","new_expe_start _month":"test","new_expe_start_year":"test", "new_expe_end_day":"test", "new_expe_end_month":"test", "new_expe_end_year":"test","new_expe_activity":"test", "new_expe_employer":"test"};
  	//var academics_fields ={"new_diploma_start_day":"", "new_diploma_start_month":"","new_diploma_start_year":"","new_diploma_end_day":"","new_diploma_end_month":"", "new_diploma_end_year":"","new_diploma_topic":"", "new_diploma_institution":""};
  	//var skills_fields ={"new_skill_topic":"", "new_skill_level":""};
	
    osapi.appdata.get({userId: app.viewer.id}).execute(function(appdata){
		appdata = appdata[app.viewer.id];
		if (appdata["experience"]) {
			expedata = JSON.parse(appdata["experience"]);
			console.log("experience data length="+expedata.length);
			for(i=0; i<=expedata.length-1; i++)
			{
				console.log("filling workexperiencelist, index="+i);
				console.log("expedata[i].new_expe_start_year = "+expedata[i].new_expe_start_year);
				//console.log("cvdata.workexperiencelist[i]= "+cvdata.workexperiencelist[i]);
				//console.log("cvdata.workexperiencelist[i].period.from.year="+cvdata.workexperiencelist[i].period.from.year);
				
				if (!cvdata.workexperiencelist[i]){
					console.log("creat new line in cvdata");
					// Adding an element by parsing a stringified representation of the index 0 element; 
						// putting directly cvdata.workexperiencelist.push(cvdata.workexperiencelist[0])
						// results in having x times the same values (maybe due to pointer-like ref?)
					cvdata.workexperiencelist.push(JSON.parse(JSON.stringify(cvdata.workexperiencelist[0])));
					console.log("*CV Data expe:*"+JSON.stringify(cvdata.workexperiencelist));
					// *adding elements in prefs to take into account new workexperiencelist item*
					var pref_elem="{\"name\":\"step3List["+i+"].company.sector.label\",\"keep\":\"false\"},{\"name\":\"step3List["+i+"].company.addressInfo\",\"keep\":\"false\"},{\"name\":\"step3List["+i+"].company.name\",\"keep\":\"true\"},{\"name\":\"step3List["+i+"].activities\",\"keep\":\"true\"},{\"name\":\"step3List["+i+"].position.label\",\"keep\":\"false\"}";
						//console.log("pref_elem="+pref_elem);
						//console.log(JSON.parse(pref_elem));
					var prefs_string = JSON.stringify(cvdata.prefs);
					prefs_string = "["+prefs_string.substr(1,(prefs_string.length-2))+","+pref_elem+"]";
						//console.log(prefs_string);
					cvdata.prefs=JSON.parse(prefs_string);
					}
				console.log("BEFORE cvdata.workexperiencelist[i]= "+JSON.stringify(cvdata.workexperiencelist[i]));
				cvdata.workexperiencelist[i].period.from.year = expedata[i].new_expe_start_year;
				cvdata.workexperiencelist[i].period.from.month = expedata[i].new_expe_start_month;
				cvdata.workexperiencelist[i].period.from.day = expedata[i].new_expe_start_day;
				cvdata.workexperiencelist[i].period.to.year = expedata[i].new_expe_end_year;
				cvdata.workexperiencelist[i].period.to.month = expedata[i].new_expe_end_month;
				cvdata.workexperiencelist[i].period.to.day = expedata[i].new_expe_end_day;
				cvdata.workexperiencelist[i].activities = decodeURIComponent(expedata[i].new_expe_activity);
				cvdata.workexperiencelist[i].employer.name = decodeURIComponent(expedata[i].new_expe_employer);
				console.log("AFTER cvdata.workexperiencelist[i]= "+JSON.stringify(cvdata.workexperiencelist[i]));
				console.log("*CV Data expe:*"+JSON.stringify(cvdata.workexperiencelist));
			}						  
			console.log("end fill expe");
			
		};
		if (appdata["skills"]) {
			skilldata = JSON.parse(appdata["skills"]);			
			console.log("skills data length="+skilldata.length);
			var other_skills="";
			for(i=0; i<=skilldata.length-1; i++)
			{	
				other_skills = other_skills+ decodeURIComponent(skilldata[i].new_skill_topic) + "(level: "+skilldata[i].new_skill_level+")\n";							
			}	
			cvdata.skilllist.skill[5].value = other_skills; 	
								  
		};
/*** BUG **** !!!! !!!!****
# attention au charactère bizarre qui font planter la génération de pdf 
*** BUG **** !!!! !!!!*****/		
		if (appdata["diplomas"]) {
		console.log("begin fill diplo");
			dipdata = JSON.parse(appdata["diplomas"]);
			console.log("diploma data length="+dipdata.length);
			for(i=0; i<=dipdata.length-1; i++)
			{ //var academics_fields ={"new_diploma_start_day":"", "new_diploma_start_month":"","new_diploma_start_year":"","new_diploma_end_day":"","new_diploma_end_month":"", "new_diploma_end_year":"","new_diploma_topic":"", "new_diploma_institution":""};
  				console.log("filling diplo, index="+i);
  				if (!cvdata.educationlist[i]){
					// add 1 element in the educationlist (else, index error)
					cvdata.educationlist.push(JSON.parse(JSON.stringify(cvdata.educationlist[0])))
					// add 1 element in the prefs
					var pref_elem = "{\"name\":\"step4List["+i+"].level.label\",\"keep\":\"false\"},{\"name\":\"step4List["+i+"].educationalOrg.addressInfo\",\"keep\":\"false\"},{\"name\":\"step4List["+i+"].educationalOrg.name\",\"keep\":\"true\"},{\"name\":\"step4List["+i+"].skills\",\"keep\":\"true\"},{\"name\":\"step4List["+i+"].title\",\"keep\":\"false\"}";	
					console.log("pref_elem="+pref_elem);
					var prefs_string = JSON.stringify(cvdata.prefs);
					prefs_string = "["+prefs_string.substr(1,(prefs_string.length-2))+","+pref_elem+"]";//insert new pref elem into current prefs
					console.log(prefs_string);
					cvdata.prefs=JSON.parse(prefs_string);
					}
  				cvdata.educationlist[i].period.from.year = dipdata[i].new_diploma_start_year;
  				console.log("year filled");
				cvdata.educationlist[i].period.from.month = dipdata[i].new_diploma_start_month;
				console.log("month filled");
				cvdata.educationlist[i].period.from.day = dipdata[i].new_diploma_start_day;
				console.log("day filled");
				cvdata.educationlist[i].period.to.year = dipdata[i].new_diploma_end_year;
				console.log("year filled");
				cvdata.educationlist[i].period.to.month = dipdata[i].new_diploma_end_month;
				console.log("month filled");
				cvdata.educationlist[i].period.to.day = dipdata[i].new_diploma_end_day;
				console.log("day filled");
				cvdata.educationlist[i].skills = decodeURIComponent(dipdata[i].new_diploma_topic);
				console.log("topic filled");
				cvdata.educationlist[i].organisation.name = decodeURIComponent(dipdata[i].new_diploma_institution);
				console.log("institution filled");
			}						  
			console.log("end fill diplo");
		};	
		
		console.log("out");
	    //console.log(cvdata);
		
		console.log(JSON.stringify(cvdata));
		console.log(encodeURIComponent(JSON.stringify(cvdata)));
		// make Request
		var filename=cvdata.identification.lastname;
		console.log("opening window");
		window.open('http://shindig2.epfl.ch/proxy/cv.json?filename='+filename+'&data='+escapeData(encodeURIComponent(JSON.stringify(cvdata))));
		
    });    
    
}

//*************************************  
//##functions to switch tabs
//************************************* 
  function changeCurrentTab(older, newer){
    $("#" + older).css("color", "black");
    $("#" + older).css("background-color", "#e8e8e8");
    $("#" + newer).css("background-color", "#909090");
    $("#" + newer).css("color", "red");
    current_tab = newer;
  }
  
  function changeCurrent(older, newer){
    $("#" + older).hide();
    $("#" + newer).show();
    current = newer;
  }

//************************************* 
//## fction to protect data with CDATA
//************************************* 
function escapeData(string){
	return "<!"+"[CDATA["+string+"]"+"]>";
}

function unescapeData(string){
	return string.substring(9,(string.length-3))
}
//************************************* 
//## fction to escape some special charaecters
//************************************* 
function escapeSpecial(string){
	string = string.replace(/</g,"&lt;");
	string = string.replace(/>/g,"&gt;");
	return string;
}

//************************************* 
//## fction to get the date  
//************************************* 
  function get_date(format){
    var currentTime = new Date();
    var month = currentTime.getMonth() + 1;
    var day = currentTime.getDate();
    var year = currentTime.getFullYear();
    
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    if (minutes < 10)
      minutes = "0" + minutes;
    if (seconds < 10)
      seconds = "0" + seconds;
    if (format=="long")
    	return (day+ "/" + month + "/" + year + "   T: " + hours + ":" + minutes + ":" + seconds)
    else if (format=="compact")
    	return (day+ month +  year + "_"+ hours+ minutes + seconds)
  }
  
//************************************* LAUNCH INITIALIZATION
//launch init after all code is loaded
    setTimeout(initialize,500);  
  



</script>

  ]]></Content>
</Module>


<!-- RUBBISH CODE 


		<div class="date">
			<fieldset><legend><span>Date of Birth</span></legend>
				<div>
					<label for="day">Day</label>
					<select id="day" name="dob_day">
						<option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="11">11</option><option value="12">12</option><option value="13">13</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option><option value="25">25</option><option value="26">26</option><option value="27">27</option><option value="28">28</option><option value="29">29</option><option value="30">30</option><option value="31">31</option>
					</select>
				</div>
				<div>
					<label for="month">Month</label>
					<select id="month" name="dob_month">
						<option value="1">January</option><option value="2">February</option><option value="3">March</option><option value="4">April</option><option value="5">May</option><option value="6">June</option><option value="7">July</option><option value="8">August</option><option value="9">September</option><option value="10">October</option><option value="11">November</option><option value="12">December</option>
					</select>
				</div>
				<div>
					<label for="year">Year</label>
					<select id="year" name="bod_year">
						<option value="2004">2004</option><option value="2005">2005</option><option value="2006">2006</option><option value="2007">2007</option><option value="2008">2008</option>
					</select>
				</div>
			</fieldset>
		</div>

/*
	//POST
	var params = {
    'href': 'http://iamac71.epfl.ch:3000/proxy/cv.json',
    'headers': {'Content-Type': ['application/pdf;charset=utf-8'], "Accept-Language": ["en-us"]},
    'body': {'filename':filename, 'data':json_object},
	};
	osapi.http.get(params).execute(function(result) {
	  if (!result.error) {
	    alert('CV creation successful');
		console.log(result);
		window.open(result);
	  }
	});
	
	//GET
	var request ='http://iamac71.epfl.ch:3000/proxy/cv.json?filename='+filename+'&data='+escape(JSON.stringify(json_object));
	osapi.http.get({'href':request, 'format':'application/pdf'}).execute(function(result) {
	  if (!result.error) {
	    alert('success!');
	    console.log(result);
	    window.open(result.content);
	  }
	});
	*/

-->